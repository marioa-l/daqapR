{"version":3,"sources":["info/home.js","delp/examplePrograms.js","delp/utilsDeLP.js","delp/DataParsing.js","delp/generators/generators.js","delp/views.js","delp/visLibDeLPGraph.js","delp/visLibTrees.js","delp/delp.js","dung/visLibDungGraph.js","dung/visLibDungGraphExtensions.js","dung/dung.js","daqap.js","App.js","serviceWorker.js","index.js","info/sectionProgram.png","info/legend.png","info/sectionDelpGraph.png","info/sectionTree.png","info/sectionTree2.png","info/sectionView1.png","info/sectionView2.png","info/sectionView3.png","info/sectionView4.png","info/sectionForDungGraph.png","info/sectionForDungExtension.png"],"names":["HomeComponent","Container","style","textAlign","paddingTop","fontStyle","Row","borderTop","Col","lg","src","sectionDeLPGraph","color","paddingBottom","sectionLegend","borderRadius","sectionProgram","sectionTree","sectionTree2","width","sectionView1","height","sectionView2","sectionView3","sectionView4","sectionForDungGraph","sectionForDungExtension","examplePrograms","getFormatedArgumentBody","argument","replace","argumentsObject","argumentsObjectDung","subargumentsObject","defeatsObject","defeatsObjectDung","argumentsDung","attacksDung","delpSemantic","argIndex","load_arguments","args","map","id","Object","keys","push","utils","conclusion","size","vadjust","align","defeats","defeater","defeated","defeatType","arcLabel","arrows","to","enabled","type","highlight","hover","load_defeaters","subarguments","subargument","load_subarguments","trees","treesGlobal","get_labeled_tree","current","tree","obj","childs","parent","list","count","length","get_childs","tempObj","children","state","get_dialectical_tree","root","typeDefeat","nodes","edges","status","find","element","label","lines","arrayObject","value","defeat","from","dashes","generate_tree_graph_structures","jsonCoreResponseStatus","roots","tempLines","estado","entries","treesAndGuarantedd","Array","isArray","filter","elem","x","indexOf","localeCompare","build_trees_global","labeledArguments","axios","require","textAreaProgramStyle","resize","fontFamily","fontSize","paramsForRandomProgramGen2","React","Component","Generators","Views","props","handleChangeViews","bind","subArgumentRel","createRef","typesDefeats","attackTypeInternal","attackTypeConclusion","statusArguments","settingViews","optionSubArgumentRelation","this","checked","optionTypeDefeater","optionsAttacksPointsInternal","optionsAttackPointsConclusion","optionStatusArguments","handleViewsChange","position","zIndex","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","backgroundColor","Collapse","Body","FormGroup","Form","onChange","Check","defaultChecked","ref","marginLeft","data","DataSet","options","fixed","scaling","arrowStrikethrough","interaction","physics","solver","forceAtlas2Based","springConstant","centralGravity","avoidOverlap","layout","randomSeed","VisNetworkDeLPGraph","selectedArgument","myDeLPGraphNetwork","updateNetwork","dGraphNetworkEvents","notifyArgumentSelected","defineView","network","handleModalChange","msg","viewsSetting","adaptedDefeatsObject","JSON","parse","stringify","delpGraph","adaptedArgumentsObject","forEach","subsArg","subArgumentsObject","newDefeatsObject","handleNotifyArgumentSelected","self","on","params","Network","setOptions","newData","setData","concat","prevProps","paddingLeft","borderStyle","borderWidth","smooth","hierarchical","sortMethod","VisLibTrees","myTreeNetwork","updateTree","containersStyleTEST","marginTop","ModalDeLP","modalInfo","visible","setState","Modal","show","centered","className","Spinner","animation","variant","Footer","ExamplePrograms","selectedProgram","handleChange","refExample","handleTextChange","event","program","target","items","key","Control","custom","e","createSelectItems","AnalyzeProgramButton","handleOnClick","setResponse","AnalyzeButtonRef","response","handleResponse","click","newProgram","rules","split","rule","includes","delpProgram","parserProgram","parseProgram","formData","FormData","append","post","then","catch","error","console","log","Button","border","block","onClick","ProgramMenu","handleInputChange","handleLoadClick","refInput","optionValue","programName","reader","FileReader","readAsText","onload","evt","result","onerror","alert","md","accept","files","TextAreaProgram","Group","controlId","spellCheck","AppDeLP","coreResponse","dGraph","handleProgramChange","handleSelectedArgument","structures","jsonCoreResponseDGraph","literal","attack","values","Error","handleGlobalResponseChange","fluid","VisNetworkDungGraph","myDungGraphNetwork","dungGraph","arcs","fit","TitleExtension","lenght","VisNetworkDungGraphExtensions","updateNetworkExtension","extension","dungGraphNetworkEvents","node","body","update","extensionData","containersStyleTESTDung","ModalDung","QuerySemantic","handleSemanticCompute","semantic","selectedSemantic","semantics","selectedSolver","i","j","attacks","extensions","toNumberFormat","Number","SelectExtension","refExtension","handleChangeExtension","newExtensions","String","in_array","item","parseInt","SelectSemantic","handleChangeSemantic","SelectSolver","handleChangeSolver","newSolver","inline","name","disabled","AppDung","newSemantic","semanticExtensions","newDungGrapg","solverData","DAQAP","App","Navbar","expand","Brand","Link","aria-controls","Nav","NavLink","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.017bf8e5.chunk.js","sourcesContent":["import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport { Row } from \"react-bootstrap\";\nimport { Col } from \"react-bootstrap\";\nimport sectionProgram from \"./sectionProgram.png\";\nimport sectionLegend from \"./legend.png\";\nimport sectionDeLPGraph from \"./sectionDelpGraph.png\";\nimport sectionTree from \"./sectionTree.png\"\nimport sectionTree2 from \"./sectionTree2.png\"\nimport sectionView1 from \"./sectionView1.png\"\nimport sectionView2 from \"./sectionView2.png\"\nimport sectionView3 from \"./sectionView3.png\"\nimport sectionView4 from \"./sectionView4.png\"\nimport sectionForDungGraph from \"./sectionForDungGraph.png\"\nimport sectionForDungExtension from \"./sectionForDungExtension.png\"\n\nfunction HomeComponent() {\n  return (\n    <Container>\n      <h2 style={{ textAlign: 'center', paddingTop: '15px' }}>Defeasible Argumentation Query Answering Platform (DAQAP)</h2>\n      <p style={{ textAlign: 'justify', fontStyle: 'italic', paddingTop: '15px' }}>DAQAP is a web platform for\n        Defeasible Argumentation Query Answering, which offers a visual interface that facilitates the analysis of the argumentative process defined in\n        the Defeasible Logic Programming (DeLP) formalism.</p>\n      <p style={{ textAlign: 'justify' }}>\n        This tool intends to present graph that show the interaction betweent the arguments generated from a DeLP program. It has two sections: the first one focuses on structures obtained from DeLP program, while the second presents the defeat relationships from the point of view of abstract argumentation frameworks, with the possibility of calculating the extensions using Dung's semantics. Using the presented data, the platform provides support for answering queries regarding the states of literals of the input programs [1].\n      </p>\n      <h3 style={{ textAlign: 'center' }}>Tutorial</h3>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px' }}>\n        <Col lg='6'>\n          <img src={sectionDeLPGraph}></img>\n        </Col>\n        <Col lg='6'>\n          <p style={{ paddingTop: '25%', textAlign: 'justify', color: '#525252' }}>\n            The analysis for DeLP programs is handled by the DeLP\n            core module, which takes a DeLP program and a preference criterion as inputs, and returns a JSON object that contains information about: (i) the arguments\n            that can be constructed from the program, (ii) the defeat relationships, (iii) the set of warranted\n            literals as its correspond labeled tree, and (iv) the subargument relationships between arguments. From this data, a DeLP graph is drawn to show all arguments,\n            subarguments, defeat relationships, and status of each argument. The DeLP graph allows to analyze the structures and relationships that are generated from the input\n            program. In order to see the set of rules that conform a particular argument, the user can hover the mouse pointer over the argument in the graph and it will be\n            show (in a tooltip window) the set of rules that comprise it.\n\n          </p>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingBottom: '10px', paddingTop: '10px', color: '#525252' }}>\n        <Col lg='6'>\n          <p style={{ paddingTop: '20%', textAlign: 'justify' }}>\n            In the graph, the arguments are represented as triangles with the conclusion of the argument\n            at the top and an identifier in its body. The relationships between the arguments can be 'defeat' or 'subargument'. In the particular case of the defeat, DAQAP can show if it is 'proper' or 'blocking' and if the point of attack is to the 'conclusion' or to an 'internal point'. Also, each argument is painted green if its status is 'undefeated' and red if it is a 'defeated' argument (based on its dialectic trees).\n          </p>\n        </Col>\n        <Col lg='6'>\n          <img src={sectionLegend} style={{borderRadius:'15px'}}></img>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px', color: '#525252' }}>\n        <Col lg='6'>\n          <img src={sectionProgram}></img>\n        </Col>\n        <Col lg='6'>\n          <p style={{ paddingTop: '25%', textAlign: 'justify' }}>\n            This interface component is the one that allows the loading of the delp program to be analyzed. For this there are three options: enter the program rules in the text area, load some of the preloaded examples (through the selector), or load a delp program from the pc (click 'Load'). Once the program is loaded, click on 'Analyze DeLP' for the platform to analyze the program and generate the structures to be plotted.\n\n            The format for strict rules is 'Head &lt;- Body.', for defeasible rules is 'Head &gt;- Body.'  and for the facts is 'Fact.'.\n\n            The preference criteria is specified with 'use_criterion(more_specific)'. If this statement is removed, all attack relationships are considered defeats.\n          </p>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px' }}>\n        <Col lg='6'>\n          <p style={{ paddingTop: '35%', textAlign: 'justify', color: '#525252' }}>\n            In addition to the graph,  it is also possible to visualize the dialectical tree\n            generated for each argument. Here, it is also possible to distinguish between the 'proper' and\n            'blocking' defeat relationships.\n          </p>\n        </Col>\n        <Col lg='6'>\n          <Row>\n            <Col lg='6'><img src={sectionTree}></img></Col>\n            <Col lg='6'>\n              <img src={sectionTree2} style={{ width: \"40vh\", paddingTop: '50%' }}></img>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px' }}>\n        <Col lg='6'>\n          <Row>\n            <Col lg='6'><img src={sectionView1} style={{ width: \"40vh\", height: \"40vh\" }}></img></Col>\n            <Col lg='6'><img src={sectionView2} style={{ width: \"40vh\", height: \"40vh\" }}></img></Col>\n          </Row>\n          <Row>\n            <Col lg='6'><img src={sectionView3} style={{ width: \"40vh\", height: \"40vh\" }}></img></Col>\n            <Col lg='6'><img src={sectionView4} style={{ width: \"40vh\", height: \"40vh\" }}></img></Col>\n          </Row>\n        </Col>\n        <Col lg='6'>\n          <p style={{ paddingTop: '25%', textAlign: 'justify', color: '#525252' }}>\n            The interface is capable of showing all arguments generated from the\n            DeLP program, the defeat and subargument relationships, and the status of\n            each argument in a single graph called the DeLP graph. By default, all of this\n            data is drawn; however, since for larger programs this can generate very saturated\n            graphs that are difficult to analyze, we developed a set of different views that can\n            be configured through the “Views” panel. These views allow to hide certain\n            information, reducing the connections or hiding the final status of the arguments,\n            so the user can focus on the aspect that is most important to them.\n          </p>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px' }}>\n        <Col lg='6'>\n          <p style={{ paddingTop: '25%', textAlign: 'justify', color: '#525252' }}>\n            DAQAP also allows to analyze the generated DeLP\n            graph by considering it as an abstract argumentation framework, which is essentially a directed graph in which the arguments are represented by the nodes\n            and the attack relation is represented by the arcs. It is also possible to calculate\n            and display different semantics (grounded, stable, preferred and semistable) for\n            the graph. In DeLP, an attack only succeeds\n            as a defeat if the attacked argument is not preferred to the attacking argument.\n            Therefore, this defeat relation is used as the binary relation in the Dung\n            framework. Here, to create the Dung graph the classical components are used, i.e., the\n            arguments are represented by nodes and the attack relations are represented by arcs.\n          </p>\n        </Col>\n        <Col lg='6'>\n          <img src={sectionForDungGraph}></img>\n        </Col>\n      </Row>\n      <Row style={{ borderTop: 'groove 1px', paddingTop: '10px' }}>\n        <Col lg='6'>\n          <img src={sectionForDungExtension}></img>\n        </Col>\n        <Col lg='6'>\n          <p style={{ paddingTop: '25%', textAlign: 'justify', color: '#525252' }}>\n            From the generated Dung graph, the following semantics can\n            be calculated: 'grounded', 'preferred', 'stable' and 'semistable'. The calculated extensions are plotted in another graph to the right of the Dung framework. The\n            calculation of these semantics is done through the Arg-Tech solver, which\n            is provided as a Web service. Under the generated Dung graph, the semantics that can be calculated are\n            shown; when selecting any of them, the query is made to the Arg-Tech\n            Web service and the result is shown in another graph to the right of the first\n            one. Once the extensions of a semantics are calculated, it is possible to select any of them to graph the nodes that belong to it (painted in green) and those that do not belong to it (painted in red.)\n\n          </p>\n        </Col>\n      </Row>\n      <p style={{ textAlign: 'justify', fontStyle: 'italic', paddingTop: '15px' }}>[1] - Leiva, M. A., Simari, G. I., Gottifredi, S., García, A. J., & Simari, G. R. (2019, June). DAQAP: defeasible argumentation query answering platform. In International Conference on Flexible Query Answering Systems (pp. 126-138). Springer, Cham.</p>\n    </Container>\n\n  )\n}\n\nexport default HomeComponent;\n","// This file contain the DeLP programs used as examples for the platform\nexport const examplePrograms = {\n    \"0\": \"use_criterion(more_specific).\\n\\n\" +\n        \"fly(X) -< bird(X).\\n\" +\n        \"bird(X) <- chicken(X).\\n\" +\n        \"bird(X) <- penguin(X).\\n\" +\n        \"bird(X) <- duck(X).\\n\" +\n        \"bird(X) <- rhea(X).\\n\" +\n        \"~fly(X) <- penguin(X).\\n\" +\n        \"~fly(X) -< chicken(X).\\n\" +\n        \"~fly(X) -< baby(X).\\n\" +\n        \"fly(X) -< chicken(X), scared(X).\\n\\n\" +\n\n        \"chicken(little).\\n\" +\n        \"chicken(koko).\\n\" +\n        \"scared(koko).\\n\" +\n        \"chicken(lily).\\n\" +\n        \"scared(lily).\\n\" +\n        \"penguin(chilly).\\n\" +\n        \"duck(tiny).\\n\" +\n        \"baby(tiny).\\n\" +\n        \"rhea(charito).\",\n\n    \"1\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"2\": \"use_criterion(more_specific).\\n\\n\" +\n        \"surf -< nice, spare_time.\\n\" +\n        \"nice -< waves.\\n\" +\n        \"~nice -< rain.\\n\" +\n        \"rain -< cloudy.\\n\" +\n        \"~rain -< dry_season.\\n\" +\n        \"spare_time -< ~busy.\\n\" +\n        \"~busy -< ~working.\\n\" +\n        \"cold -< winter.\\n\" +\n        \"working -< monday.\\n\" +\n        \"busy -< yard_work.\\n\" +\n        \"yard_work -< grass_grown.\\n\" +\n        \"~yard_work -< hire_gardener.\\n\" +\n        \"many_surfers -< waves.\\n\" +\n        \"~many_surfers -< monday.\\n\\n\" +\n\n        \"monday.\\n\" +\n        \"cloudy.\\n\" +\n        \"dry_season.\\n\" +\n        \"waves.\\n\" +\n        \"grass_grown.\\n\" +\n        \"hire_gardener.\\n\" +\n        \"vacation.\\n\" +\n        \"~working <- vacation.\\n\" +\n        \"few_surfers <- ~many_surfers.\\n\" +\n        \"~surf <- ill.\",\n\n    \"3\": \"use_criterion(more_specific).\\n\\n\" +\n        \"r -< s.\\n\" +\n        \"~h -< d,t.\\n\" +\n        \"s -< d.\\n\" +\n        \"~e -< ~h, ~a.\\n\" +\n        \"s -< h.\\n\" +\n        \"~i -< ~a, s.\\n\" +\n        \"h -< d.\\n\" +\n        \"h -< b.\\n\" +\n        \"a -< t.\\n\" +\n        \"~f -< ~e.\\n\\n\" +\n\n        \"~a.\\n\" +\n        \"t.\\n\" +\n        \"b.\\n\" +\n        \"d <- t.\",\n\n    \"4\": \"has_priority((a-<d,b,c),(~a-<b,c)).\\n\" +\n        \"has_priority((~a-<b,c),(a-<b)).\\n\\n\" +\n\n        \"use_criterion(rules_priorities).\\n\\n\" +\n\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"5\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a -< x.\\n\" +\n        \"a -< y.\\n\" +\n        \"~a -< x,y.\\n\" +\n        \"~a -< z.\\n\" +\n        \"a -< x,y,z.\\n\" +\n        \"~a -< w,z.\\n\" +\n        \"a -< w.\\n\\n\" +\n\n        \"x.\\n\" +\n        \"y.\\n\" +\n        \"z.\\n\" +\n        \"w.\",\n\n    \"6\": \"use_criterion(more_specific).\\n\" +\n\n        \"a-<b.\\n\\n\" +\n\n        \"~a-<b,c.\\n\" +\n        \"~a-<b,d.\\n\" +\n        \"~a-<b,e.\\n\\n\" +\n\n        \"a-<b,z,c.\\n\" +\n        \"a-<b,z,d.\\n\" +\n        \"a-<b,z,e.\\n\\n\" +\n\n        \"a-<b,c,d,e.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\\n\" +\n        \"e.\\n\" +\n        \"z.\",\n        \n    \"7\": \"use_criterion(more_specific).\\n\" +\n        \n        \"a_2 -< true.\\n\" +\n        \"a_3 -< true.\\n\" +\n        \"a_4 -< true.\\n\" +\n        \"d_9 -< true.\\n\" +\n        \"d_10 -< true.\\n\" +\n        \"~d_11 -< true.\\n\" +\n        \"~d_12 -< true.\\n\" +\n        \"~d_13 -< true.\\n\" +\n        \"d_14 -< true.\\n\" +\n        \"d_15 -< true.\\n\" +\n        \"~d_16 -< true.\\n\" +\n        \"~d_17 -< true.\\n\" +\n        \"~a_0.\\n\" +\n        \"a_1.\\n\" +\n        \n        \"a_6 -< a_4.\\n\" +\n        \"~a_5 <- a_3.\\n\" +\n        \n        \"a_8 -< a_6.\\n\" +\n        \"~a_7 -< a_6.\\n\" +\n        \n        \"~a_8 -< d_9,a_6.\\n\" +\n        \"~a_8 -< a_4,d_10.\\n\" +\n        \"a_8 -< d_9,~d_11,a_6.\\n\" +\n        \"a_8 -< ~d_12,a_4,d_10.\\n\" +\n        \"a_7 -< a_4,~d_13.\\n\" +\n        \"a_7 -< d_14,a_6.\\n\" +\n        \"~a_7 -< a_4,~d_13,d_15.\\n\" +\n        \"~a_7 -< a_4,~d_13,~d_16.\\n\" +\n        \"~a_7 -< ~d_17,d_14,a_6.\",\n        \n    \"8\": \"use_criterion(more_specific).\\n\" +\n        \n        \"a_0 -< true.\\n\" +\n        \"a_1 -< true.\\n\" +\n        \"a_3 -< true.\\n\" +\n        \"a_4 -< true.\\n\" +\n        \"a_5 -< true.\\n\" +\n        \"a_7 -< true.\\n\" +\n        \"a_8 -< true.\\n\" +\n        \"~a_9 -< true.\\n\" +\n        \"d_18 -< true.\\n\" +\n        \"d_19 -< true.\\n\" +\n        \"d_20 -< true.\\n\" +\n        \"d_21 -< true.\\n\" +\n        \"d_22 -< true.\\n\" +\n        \"~d_23 -< true.\\n\" +\n        \"d_24 -< true.\\n\" +\n        \"~d_25 -< true.\\n\" +\n        \"~d_26 -< true.\\n\" +\n        \"~d_27 -< true.\\n\" +\n        \"d_28 -< true.\\n\" +\n        \"~d_29 -< true.\\n\" +\n        \"~d_30 -< true.\\n\" +\n        \"~d_31 -< true.\\n\" +\n        \"~d_32 -< true.\\n\" +\n        \"d_33 -< true.\\n\" +\n        \"d_34 -< true.\\n\" +\n        \"d_35 -< true.\\n\" +\n        \"~d_36 -< true.\\n\" +\n        \"d_37 -< true.\\n\" +\n        \"d_38 -< true.\\n\" +\n        \"d_39 -< true.\\n\" +\n        \"~d_40 -< true.\\n\" +\n        \"~d_41 -< true.\\n\" +\n        \"~d_42 -< true.\\n\" +\n        \"d_43 -< true.\\n\" +\n        \"~d_44 -< true.\\n\" +\n        \"~d_45 -< true.\\n\" +\n        \"d_46 -< true.\\n\" +\n        \"d_47 -< true.\\n\" +\n        \"d_48 -< true.\\n\" +\n        \"d_49 -< true.\\n\" +\n        \"d_50 -< true.\\n\" +\n        \"d_51 -< true.\\n\" +\n        \"~d_52 -< true.\\n\" +\n        \"~d_53 -< true.\\n\" +\n        \"~d_54 -< true.\\n\" +\n        \"~d_55 -< true.\\n\" +\n        \"d_56 -< true.\\n\" +\n        \"d_57 -< true.\\n\" +\n        \"d_58 -< true.\\n\" +\n        \"d_59 -< true.\\n\" +\n        \"d_60 -< true.\\n\" +\n        \"~d_61 -< true.\\n\" +\n        \"d_62 -< true.\\n\" +\n        \"d_63 -< true.\\n\" +\n        \"~d_64 -< true.\\n\" +\n        \"~d_65 -< true.\\n\" +\n        \"a_2.\\n\" +\n        \"~a_6.\\n\" +\n        \n        \"~a_12 -< a_7.\\n\" +\n        \"a_13 -< a_8.\\n\" +\n        \"a_11 <- a_2,a_5.\\n\" +\n        \"~a_10 <- a_5,a_7.\\n\" +\n        \n        \"a_14 -< a_13,a_0.\\n\" +\n        \"a_15 -< a_13,~a_9.\\n\" +\n        \"a_17 -< a_13,a_7.\\n\" +\n        \"a_16 -< ~a_12.\\n\" +\n        \n        \"~a_14 -< a_13,d_18,a_0.\\n\" +\n        \"~a_14 -< a_13,d_19,a_0.\\n\" +\n        \"~a_14 -< a_13,d_20,a_0.\\n\" +\n        \"~a_14 -< a_13,d_21,a_0.\\n\" +\n        \"a_14 -< a_13,d_22,d_18,a_0.\\n\" +\n        \"a_14 -< a_13,d_18,a_0,~d_23.\\n\" +\n        \"a_14 -< a_13,d_24,d_19,a_0.\\n\" +\n        \"a_14 -< a_13,~d_25,d_19,a_0.\\n\" +\n        \"a_14 -< a_13,d_20,~d_26,a_0.\\n\" +\n        \"a_14 -< a_13,d_20,~d_27,a_0.\\n\" +\n        \"a_14 -< a_13,d_21,d_28,a_0.\\n\" +\n        \"a_14 -< a_13,d_21,a_0,~d_29.\\n\" +\n        \"~a_15 -< ~d_30,a_8.\\n\" +\n        \"~a_15 -< a_13,~a_9,~d_31.\\n\" +\n        \"~a_15 -< a_13,~a_9,~d_32.\\n\" +\n        \"~a_15 -< d_33,a_8.\\n\" +\n        \"a_15 -< d_34,~d_30,a_8.\\n\" +\n        \"a_15 -< ~d_30,a_8,d_35.\\n\" +\n        \"a_15 -< ~d_30,~d_36,a_8.\\n\" +\n        \"a_15 -< a_13,~a_9,d_37,~d_31.\\n\" +\n        \"a_15 -< a_13,~a_9,d_38,~d_32.\\n\" +\n        \"a_15 -< d_33,a_8,d_39.\\n\" +\n        \"~a_17 -< a_13,a_7,~d_40.\\n\" +\n        \"~a_17 -< ~d_41,a_8.\\n\" +\n        \"~a_17 -< ~d_42,a_8.\\n\" +\n        \"~a_17 -< d_43,a_8.\\n\" +\n        \"a_17 -< a_13,a_7,~d_44,~d_40.\\n\" +\n        \"a_17 -< a_13,a_7,~d_45,~d_40.\\n\" +\n        \"a_17 -< ~d_41,a_8,d_46.\\n\" +\n        \"a_17 -< ~d_41,a_8,d_47.\\n\" +\n        \"a_17 -< ~d_42,d_48,a_8.\\n\" +\n        \"a_17 -< ~d_42,d_49,a_8.\\n\" +\n        \"a_17 -< d_43,d_50,a_8.\\n\" +\n        \"a_17 -< d_43,d_51,a_8.\\n\" +\n        \"~a_16 -< ~a_12,~d_52.\\n\" +\n        \"~a_16 -< ~a_12,~d_53.\\n\" +\n        \"~a_16 -< a_7,~d_54.\\n\" +\n        \"~a_16 -< a_7,~d_55.\\n\" +\n        \"a_16 -< ~a_12,~d_52,d_56.\\n\" +\n        \"a_16 -< d_57,~a_12,~d_52.\\n\" +\n        \"a_16 -< ~a_12,~d_52,d_58.\\n\" +\n        \"a_16 -< d_59,~a_12,~d_52.\\n\" +\n        \"a_16 -< d_60,~a_12,~d_53.\\n\" +\n        \"a_16 -< ~a_12,~d_61,~d_53.\\n\" +\n        \"a_16 -< ~a_12,d_62,~d_53.\\n\" +\n        \"a_16 -< d_63,~a_12,~d_53.\\n\" +\n        \"a_16 -< a_7,~d_64,~d_54.\\n\" +\n        \"a_16 -< a_7,~d_65,~d_55.\\n\"\n\n    /* \"7\": \"use_criterion(more_specific).\\n\\n\" +\n\n        \"~culpable(X) -< not culpable(X).\\n\" +\n        \"~preso(X) <- inocente(X).\\n\" +\n        \"inocente(X) <- ~culpable(X).\\n\" +\n        \"preso(X) -< not culpable(X), alta-sospecha(X).\\n\" +\n        \"alta-sospecha(pepe) .\" */\n\n}\n","export function getFormatedArgumentBody(argument) {\n    return argument.replace(/-</g, \"⤙\").replace(/_G[0-9]+/g, \"X\").replace(/<-/g, \"⇽\");\n}\n\nexport function valueExistsinObjectArray(arrayObject, value) {\n    for (var count = 0; count < arrayObject.length; count++) {\n        if (arrayObject[count].id === value) {\n            return true;\n        }\n    }\n\n    return false;\n}","import * as utils from \"./utilsDeLP\";\n\n// Global structures\nlet argumentsObject = [];\nlet argumentsObjectDung = [];\nlet subargumentsObject = [];\nlet defeatsObject = [];\nlet defeatsObjectDung = [];\nlet argumentsDung = {}; //argument:id\nlet attacksDung = []; //Tuples of (from, to)\nlet delpSemantic = []; //Ids of warrant arguments\nlet argIndex = 0;\n\n// Build the Defeats object for the DeLP Graph\nfunction load_defeaters(defeater, defeated) {\n    let defeatType;\n    let arcLabel;\n    //To set the type of defeat (proper or blocking) Check this!\n    defeater['defeaterType'] === 'proper' ? defeatType = true : defeatType = false;\n\n    //To set the type of attack (conclusion or internal)\n    defeater['innerPoint'] === defeated.conclusion ? arcLabel = 'C' : arcLabel = 'I';\n\n    //Load the defeats object\n    defeatsObject.push({\n        'from': utils.getFormatedArgumentBody(defeater['defeat']),\n        'to': utils.getFormatedArgumentBody(defeated.id),\n        arrows: {\n            to: {\n                enabled: true,\n                type: 'arrow'\n            }\n        },\n        'color': {\n            color: '#d9534f',\n            highlight: 'red',\n            hover: 'red'\n        },\n        'width': 3,\n        'label': arcLabel,\n        'dashes': defeatType,\n        'font': {\n            color: 'black',\n            size: 18,\n            align: 'top'\n        }\n    });\n\n\n\n}\n\n// Build the SubArguments object for the DeLP Graph\nfunction load_subarguments(subargument, argument) {\n    if (subargument !== argument.id) {\n        subargumentsObject.push({\n            'from': utils.getFormatedArgumentBody(subargument),\n            'to': utils.getFormatedArgumentBody(argument.id),\n            arrows: {\n                to: {\n                    enabled: true,\n                    type: 'circle'\n                }\n            },\n            color: {\n                color: '#5bc0de',\n                highlight: '#5bc0de',\n                hover: '#5bc0de'\n            },\n            width: 3\n        });\n    }\n}\n\n// Build the Arguments Object for the DeLP Graph\nfunction load_arguments(args) {\n    args.map(argument => {\n        let id = Object.keys(argument)[0];\n        argumentsObject.push({\n            'id': utils.getFormatedArgumentBody(id),\n            'label': argument[id].conclusion + '\\n\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'triangle',\n            'size': '40'\n        });\n        argumentsObjectDung.push({\n            'id': argIndex,\n            'label': argument[id].conclusion + '\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'dot',\n            'size': '40'\n        });\n        argumentsDung[utils.getFormatedArgumentBody(id)] = argIndex;\n        argument[id].defeats.map(defeater => load_defeaters(defeater, argument[id]));\n        argument[id].subarguments.map(subargument => load_subarguments(subargument, argument[id]));\n        argIndex = argIndex + 1;\n    });\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the DeLP Graph\nexport function generate_graph_structures(jsonCoreResponseDGraph) {\n    //console.log(\"Parsing DeLP Core response (DGraph)...\")\n    argumentsObject = [];\n    argumentsObjectDung = [];\n    subargumentsObject = [];\n    defeatsObject = [];\n    defeatsObjectDung = [];\n    argumentsDung = {};\n    attacksDung = [];\n    delpSemantic = [];\n    argIndex = 0;\n\n    jsonCoreResponseDGraph.map(literal => {\n        let key = Object.keys(literal)[0];\n        load_arguments(literal[key]);\n    });\n    defeatsObject.map(attack => {\n        attacksDung.push('(' + argumentsDung[attack['from']] + ',' + argumentsDung[attack['to']] + ')');\n        defeatsObjectDung.push({ 'from': argumentsDung[attack['from']], 'to': argumentsDung[attack['to']], 'arrows': 'to', 'width': 3 })\n    });\n    return {\n        'argumentsObject': argumentsObject,\n        'argumentsObjectDung': argumentsObjectDung,\n        'subArgumentsObject': subargumentsObject,\n        'defeatsObject': defeatsObject,\n        'defeatsObjectDung': defeatsObjectDung,\n        'argumentsDung': Object.values(argumentsDung),\n        'attacksDung': attacksDung\n    };\n}\n\n/////////////////////\n// For tree graphs //\n/////////////////////\n\n// Global structures\nlet trees = {}\nlet treesGlobal = {}\n\n// To get the type of a defeat relation\nfunction get_type_defeat(argument, defeater) {\n    let typeDefeat = defeatsObject.find(defeat => defeat.from === utils.getFormatedArgumentBody(defeater) && defeat.to === utils.getFormatedArgumentBody(argument));\n    return typeDefeat.dashes;\n}\n\n// Returns all children of a parent in the tree structure\nfunction get_childs(parent, list) {\n    let childs = [];\n    for (var count = 0; count < list.length; count++) {\n        if (list[count][2] === parent) {\n            childs.push(list[count]);\n        }\n    }\n    return childs;\n}\n\n// Return the state of the root\nfunction get_labeled_tree(current, tree, obj) {\n    let childs = get_childs(current, tree);\n    if (childs.length === 0) {\n        //leaves nodes\n        return \"U\";\n    } else {\n        var tempObj = [];\n        //intermediate nodes\n        for (var children = 0; children < childs.length; children++) {\n\n            let estado = get_labeled_tree(childs[children][3], tree, obj);\n            if (estado === \"U\") {\n                obj.push([childs[children], \"U\", '#33FF6B']);\n                tempObj.push([childs[children][3], \"U\"]);\n            } else {\n                obj.push([childs[children], \"D\", '#ff6666']);\n                tempObj.push([childs[children][3], \"D\"]);\n            }\n        }\n        var state = \"U\";\n\n        for (var count = 0; count < tempObj.length; count++) {\n            if (tempObj[count][1] === \"U\") {\n                state = \"D\";\n                break;\n            }\n        }\n        if (state === \"D\") {\n            return \"D\";\n        } else {\n            return \"U\";\n        }\n\n    }\n}\n\n\n// Function to build the global trees structure (intern)\nfunction build_trees_global(status) {\n    let trees, roots, lines, tempLines, obj, lit, estado = \"\";\n    for (const [, [, treesAndGuarantedd]] of Object.entries(Object.entries(status))) {\n        lit = Object.keys(treesAndGuarantedd)[0]; //The literal (the key for access to its tree)\n        trees = treesAndGuarantedd[lit].trees; //All trees associated with the literal\n        Array.isArray(trees[0]) ? roots = trees.filter(elem => elem.length === 2) : roots.push(trees);\n        //roots = trees.filter(elem => elem.length == 2); //All roots\n        //lines = trees.diff(roots); //All lines (whitout roots)\n        lines = trees.filter(x => !roots.indexOf(x) > -1);\n        tempLines = lines; //Temporal lines (this is for clean the set of all lines)\n        obj = [];\n        for (const [, [, root]] of Object.entries(Object.entries(roots))) {\n            if (root.length !== 0) {\n                estado = get_labeled_tree(root[1], tempLines, obj); // Return the state of the root\n                if (estado.localeCompare(\"U\") === 0){\n                    //Warrant argument\n                    delpSemantic.push(argumentsDung[utils.getFormatedArgumentBody(root[0])]);\n                } \n                treesGlobal[utils.getFormatedArgumentBody(root[0])] = {\n                    'id': root[1],\n                    'status': estado,\n                    'tree': obj\n                }\n            }\n            tempLines = tempLines.filter(x => !obj.indexOf(x) > -1);\n            obj = [];\n\n        }\n    }\n}\n\n// Return the dialectical tree of a particular argument\nfunction get_dialectical_tree(root) {\n    let nodes = [];\n    let edges = [];\n    let color, typeDefeat, conclusion;\n\n    if (treesGlobal[root].status === \"U\") {\n        color = '#33FF6B';\n    } else {\n        color = '#ff6666';\n    }\n\n    conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(root));\n    //Add the root of the tree\n    nodes.push({\n        'id': treesGlobal[root].id,\n        'label': conclusion.label,\n        'title': root,\n        'shape': 'triangle',\n        'size': 40,\n        'font': {\n            vadjust: -130,\n            size: 28,\n            color: 'black'\n        },\n        'color': color\n    });\n\n    let lines = treesGlobal[root].tree;\n    for (let count = 0; count < lines.length; count++) {\n        if (!utils.valueExistsinObjectArray(nodes, lines[count][0][3])) {\n            conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(lines[count][0][1]));\n            nodes.push({\n                'id': lines[count][0][3],\n                'label': conclusion.label,\n                'title': utils.getFormatedArgumentBody(lines[count][0][1]),\n                'shape': 'triangle',\n                'color': lines[count][2],\n                'size': 40,\n                'font': {\n                    vadjust: -130,\n                    size: 28,\n                    color: 'black'\n                }\n\n            });\n        }\n        typeDefeat = get_type_defeat(lines[count][0][0], lines[count][0][1]);\n        edges.push({\n            from: lines[count][0][2],\n            to: lines[count][0][3],\n            width: 3,\n            'dashes': typeDefeat\n        });\n    }\n\n    return {\n        'nodes': nodes,\n        'edges': edges\n    };\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the tree graphs\nexport function generate_tree_graph_structures(jsonCoreResponseStatus) {\n    //console.log(\"Parsing DeLP Core response (Trees)...\");\n    treesGlobal = {};\n    trees = {};\n    // Build global trees structure\n    build_trees_global(jsonCoreResponseStatus);\n\n    // Build the structures to graph the dialectical trees\n    for (const [root,] of Object.entries(treesGlobal)) {\n        trees[root] = get_dialectical_tree(root);\n    }\n\n    let labeledArguments = []\n    argumentsObject.map(argument => {\n        argument.color = trees[argument.id].nodes[0].color;\n        labeledArguments.push(argument)\n    });\n    return [trees, labeledArguments, delpSemantic];\n}\n\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport {Col, Form} from 'react-bootstrap';\n\n\nconst URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst axios = require('axios');\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\",\n  height: '53vh'\n}\n\nconst paramsForRandomProgramGen2 = {\n    \"nPosLiterals\" : 10,\n    \"nNegLiterals\" : 5,\n    \"maxStrictLiterals\" : 5,\n    \"nestingLevel\": 3,\n    \"bodyLength\" : 3,\n    \"headPerLiteral\" : 4,\n    \"properDefeatProb\" : 0.5\n}\n\nconst paramsForRandomProgramGen1 = {\n    \"nPrograms\" : 1, //Number of program to generate\n    \"nLiterals\" : 20, //Max number of literals\n    \"nNegLiterals\" : 15, //Max number of negative literals\n    \"nFacts\" : 7, //Max number of facts\n    \"minNDifHeads\" : 4, //Min number of differente heads\n    \"maxNDifHeads\" : 6, //Max number of differente heads,\n    \"minNDifRules\" : 5, //Min number of rules\n    \"maxNDifRules\" : 6, //Max number of rules,\n    \"maxNStrictsRules\" : 5, //Max number of strict rules\n    \"minNRulesInBody\" : 4, //Min number of literals in bodies\n    \"maxNRulesInBody\" : 4, //Max number of literals in bodies\n    \"maxAssocLevel\" : 3 //Association Level\n}\n\nclass Generator2Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    \n    this.inputPosLit = React.createRef();\n    this.inputNegLit = React.createRef();\n    this.inputMaxSRules = React.createRef();\n    this.inputNestingLevel = React.createRef();\n    this.inputBodyLentgh = React.createRef();\n    this.inputHeads = React.createRef();\n    //this.inputPropDefProb = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPosLiterals\": parseInt(this.inputPosLit.current.value),\n        \"nNegLiterals\": parseInt(this.inputNegLit.current.value),\n        \"maxStrictLiterals\": parseInt(this.inputMaxSRules.current.value),\n        \"nestingLevel\": parseInt(this.inputNestingLevel.current.value),\n        \"bodyLength\": parseInt(this.inputBodyLentgh.current.value),\n        \"headPerLiteral\": parseInt(this.inputHeads.current.value),\n        \"properDefeatProb\": 0.5\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    console.log(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp2');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render() {\n    return (\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n\n                <Form.Label>Literals:</Form.Label>\n                <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputPosLit} min=\"1\" step=\"1\" />\n\n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n                <Form.Label>~Literals:</Form.Label>\n                <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputNegLit} min=\"1\" step=\"1\" />\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number of strict rules\" ref={this.inputMaxSRules} min=\"1\" step=\"1\" />\n            <Form.Label>Nesting Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputNestingLevel} min=\"1\" step=\"1\" />\n            <Form.Label>Bodies:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputBodyLentgh} min=\"1\" step=\"1\" />\n            <Form.Label>Heads:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputHeads} min=\"1\" step=\"1\" />\n\n          </Form.Group>\n\n          <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)} />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} sm={4}>\n            <Button variant=\"primary\" onClick={() => this.generateClick(this.getParams())}>\n              Generate\n            </Button>\n            <Button variant=\"primary\" onClick={() => this.generateClick(paramsForRandomProgramGen2)}>\n              Random\n            </Button>\n          </Form.Group>\n          <Form.Group as={Col} sm={8}>\n            <Button variant=\"primary\" style={{ float: \"right\" }} onClick={this.returnProgram}>\n              Ok\n            </Button>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    )\n  }\n}\n\n/* class Generator1Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    this.inputLit = React.createRef();\n    this.inputNLit = React.createRef();\n    this.inputFacts = React.createRef();\n    this.inputMinHeads = React.createRef();\n    this.inputMaxHeads = React.createRef();\n    this.inputMinRules = React.createRef();\n    this.inputMaxRules = React.createRef();\n    this.inputSRules = React.createRef();\n    this.inputMinBodyLiterals = React.createRef();\n    this.inputMaxBodyLiterals = React.createRef();\n    this.inputAssocLevel = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPrograms\": 1, //Number of program to generate\n        \"nLiterals\": parseInt(this.inputLit.current.value), //Max number of literals\n        \"nNegLiterals\": parseInt(this.inputNLit.current.value), //Max number of negative literals\n        \"nFacts\": parseInt(this.inputFacts.current.value), //Max number of facts\n        \"minNDifHeads\": parseInt(this.inputMinHeads.current.value), //Min number of differente heads\n        \"maxNDifHeads\": parseInt(this.inputMaxHeads.current.value), //Max number of differente heads,\n        \"minNDifRules\": parseInt(this.inputMinRules.current.value), //Min number of rules\n        \"maxNDifRules\": parseInt(this.inputMaxRules.current.value), //Max number of rules,\n        \"maxNStrictsRules\": parseInt(this.inputSRules.current.value), //Max number of strict rules\n        \"minNRulesInBody\": parseInt(this.inputMinBodyLiterals.current.value), //Min number of literals in bodies\n        \"maxNRulesInBody\": parseInt(this.inputMaxBodyLiterals.current.value), //Max number of literals in bodies\n        \"maxAssocLevel\": parseInt(this.inputAssocLevel.current.value) //Association Level\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp1');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/[\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render(){\n    return(\n        <Form>\n        <Form.Row>\n            <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n              <Form.Label>Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputLit} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              <Form.Label>~Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number\" ref={this.inputNLit} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Facts:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of facts\" ref={this.inputFacts} min=\"1\" step=\"1\"/>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of strict rules\" ref={this.inputSRules} min=\"1\" step=\"1\"/>\n            <Form.Label>Association Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputAssocLevel} min=\"1\" step=\"1\"/>\n            \n            <Form.Label>Different Heads:</Form.Label>\n            \n            <Form.Row>\n            \n            <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            <Form.Group as={Col} sm={6}>\n            \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            </Form.Row>\n            <Form.Label>Rules:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min  \" ref={this.inputMinRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Body Literals:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max\" ref={this.inputMaxBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n            </Form.Row>\n            \n            </Form.Group>\n            \n            <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" rows=\"23\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)}/>\n            </Form.Group>\n        </Form.Row>\n        <Form.Row>\n        <Form.Group as={Col} sm={4}>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(this.getParams())}>\n            Generate\n        </Button>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(paramsForRandomProgramGen1)}>\n            Random\n        </Button>\n        </Form.Group>\n        <Form.Group as={Col} sm={8}>\n        <Button variant=\"primary\" style={{float:\"right\"}} onClick={this.returnProgram}>\n            Ok\n        </Button>\n        </Form.Group>\n        </Form.Row>\n        </Form>\n    )\n  }\n} */\n\nfunction GeneratorsModal(props){\n      const [key, setKey] = useState('gen1');\n\n      function handleGenProg(program){\n        props.returnedProgram(program);\n        props.onHide();\n        \n      }\n\n      return (\n        <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={props.show} onHide={props.onHide} centered style={{height: '95vh'}}>\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              DeLP Programs Generators\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {/* <Tabs\n              id=\"controlled-tab-example\"\n              activeKey={key}\n              onSelect={(k) => setKey(k)}\n            >\n              <Tab eventKey=\"gen1\" title=\"Generator 1\">\n                <Generator1Form program={handleGenProg}/>\n              </Tab> */}\n              {/* <Tab eventKey=\"gen2\" title=\"Generator 2\"> */}\n                <Generator2Form program={handleGenProg}/>\n              {/* </Tab>\n            </Tabs> */}\n          </Modal.Body>\n          {/* <Modal.Footer>\n            <Button onClick={props.onHide}>Close</Button>\n          </Modal.Footer> */}\n        </Modal>\n      )\n  }\n  \n  function Generators(props) {\n    const [modalShow, setModalShow] = React.useState(false);\n    \n    function generatedProgram(program){\n      props.showGeneratedProgram(program);\n    }\n    \n    return (\n      <>\n        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"sm\" onClick={() => setModalShow(true)} blocked>\n          Generators (experimental)\n        </Button>\n  \n        <GeneratorsModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          returnedProgram={generatedProgram}\n        />\n      </>\n    );\n  }\n\nexport default Generators;","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport {Button, FormGroup} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass Views extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleChangeViews = this.handleChangeViews.bind(this);\n        this.subArgumentRel = React.createRef();\n        this.typesDefeats = React.createRef();\n        this.attackTypeInternal = React.createRef();\n        this.attackTypeConclusion = React.createRef();\n        this.statusArguments = React.createRef();\n\n    }\n\n    handleChangeViews(){\n        let settingViews = {\n            optionSubArgumentRelation: this.subArgumentRel.current.checked,\n            optionTypeDefeater: this.typesDefeats.current.checked,\n            optionsAttacksPointsInternal: this.attackTypeInternal.current.checked,\n            optionsAttackPointsConclusion: this.attackTypeConclusion.current.checked,\n            optionStatusArguments: this.statusArguments.current.checked\n        };\n\n        this.props.handleViewsChange(settingViews);\n\n    }\n\n    render() {\n        return (\n            <div style={{position: 'absolute',zIndex:999}}>\n            <Accordion defaultActiveKey=\"1\">\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" style={{paddingTop:'0px',\n                        backgroundColor:'#FAFAFA', color:'black', paddingBottom:'0px'}}>\n                        Views\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <FormGroup>\n                            {/* <label style={{color:'#337ab7', fontSize:'20px'}}>-- Views</label> */}\n                            <Form onChange={this.handleChangeViews}>\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref={this.subArgumentRel}\n                                    label='Subargument relation'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.typesDefeats}\n                                    label='Types of defeat (proper or blocking)'\n                                />\n                                <label>Attack type:</label>\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeInternal}\n                                            label='Internal'\n                                />\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeConclusion}\n                                            label='Conclusion'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.statusArguments}\n                                    label='Status of the arguments'\n                                />\n                            </Form>\n                            </FormGroup>\n                            {/* <FormGroup>\n                                <label style={{color:'#337ab7', fontSize:'20px'}}>-- DeLP Graph</label>\n                                <Row>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Info</Button>\n                                    </Col>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Print</Button>\n                                    </Col>\n\n                                </Row>\n                            </FormGroup> */}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n            </Accordion>\n            </div>\n        );\n    }\n}\n\nexport default Views;","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nimport Views from \"./views\";\nimport Container from 'react-bootstrap/Container'\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDeLPGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.selectedArgument = '';\n        this.myDeLPGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.dGraphNetworkEvents = this.dGraphNetworkEvents.bind(this);\n        this.notifyArgumentSelected = this.notifyArgumentSelected.bind(this);\n        this.defineView = this.defineView.bind(this);\n        this.network = {};\n        this.handleModalChange = this.handleModalChange.bind(this);\n    }\n\n    handleModalChange(value, msg){\n        this.props.handleModalChange(value, msg);\n      }\n\n    defineView(viewsSetting){\n        let adaptedDefeatsObject = JSON.parse(JSON.stringify(this.props.delpGraph.defeatsObject));\n        let adaptedArgumentsObject = JSON.parse(JSON.stringify(this.props.delpGraph.argumentsObject));\n\n        if ((viewsSetting.optionsAttacksPointsInternal || viewsSetting.optionsAttackPointsConclusion) &&\n            !(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n            if (viewsSetting.optionsAttacksPointsInternal) {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === 'I');\n            } else {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === \"C\");\n            }\n        } else {\n            if (!(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n\n                adaptedDefeatsObject.forEach(function (element) { delete element.label });\n\n            }\n\n        }\n\n        if (!viewsSetting.optionTypeDefeater) {\n            adaptedDefeatsObject.forEach(function (element) { delete element.dashes });\n            adaptedDefeatsObject.forEach(function (element) {\n                element.color = {\n                    color: '#97C2FC',\n                    highlight: '#97C2FC',\n                    hover: '#97C2FC'\n                };\n            });\n        }\n\n        let subsArg = [];\n        if (viewsSetting.optionSubArgumentRelation) {\n            subsArg = this.props.delpGraph.subArgumentsObject;\n        }\n\n        if(!viewsSetting.optionStatusArguments){\n            adaptedArgumentsObject.forEach(function (element) {\n                delete element.color\n            });\n        }\n\n        let newDefeatsObject = {\n            argumentsObject: adaptedArgumentsObject,\n            defeatsObject: adaptedDefeatsObject,\n            subArgumentsObject: subsArg\n        };\n\n        this.updateNetwork(newDefeatsObject);\n    }\n\n    notifyArgumentSelected(){\n        this.props.handleNotifyArgumentSelected(this.selectedArgument);\n    }\n\n    dGraphNetworkEvents(){\n        let self = this;\n        //Here define the associadted events with the network\n        this.network.on(\"click\", function (params) {\n            let selectedArgument = params.nodes[0];\n            if(selectedArgument){\n                self.selectedArgument = selectedArgument;\n                self.notifyArgumentSelected();\n            }\n        });\n        this.network.on(\"stabilizationIterationsDone\", function (params) {\n            self.handleModalChange(false, '');\n        });\n    }\n\n    componentDidMount(){\n        this.network = new Network(this.myDeLPGraphNetwork.current, data, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.dGraphNetworkEvents();\n    }\n\n    updateNetwork(newData){\n        //console.log(\"Updating network...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.argumentsObject, edges:newData.defeatsObject.concat(newData.subArgumentsObject)});\n\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.delpGraph !== prevProps.delpGraph){\n            this.updateNetwork(this.props.delpGraph);\n        }\n    }\n\n    render(){\n        return(\n            <Container>\n            <div style={{backgroundColor:'#EFEFEF', borderRadius: '5px', paddingLeft:'5px'}}>\n            DeLP Graph\n            </div>\n            <Views handleViewsChange = {this.defineView}/>\n                <div ref={this.myDeLPGraphNetwork} style={{height: \"86vh\", borderStyle:'groove', borderWidth: '0.2px', borderTop: '0'}}/>\n            </Container>\n        )\n    }\n}\n\n\nexport default VisNetworkDeLPGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nimport Container from 'react-bootstrap/Container'\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n\n// Options for Trees Network\nvar options = {\n    edges: {\n        smooth: true,\n        arrowStrikethrough: false,\n        arrows: { from: true }\n    },\n    layout: {\n        randomSeed: 2,\n        hierarchical: {\n            sortMethod: 'directed'\n        }\n    },\n    physics: {\n        enabled: false\n    }\n};\n\n\n\nclass VisLibTrees extends React.Component {\n    constructor(props) {\n        super(props);\n        this.network = {};\n        this.myTreeNetwork = React.createRef();\n        this.updateTree = this.updateTree.bind(this);\n    }\n\n    componentDidMount() {\n        this.network = new Network(this.myTreeNetwork.current, data, options);\n    }\n\n    updateTree(tree) {\n        nodes = tree.nodes;\n        edges = tree.edges;\n\n        this.network.setData({ nodes: nodes, edges: edges });\n\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedArgument !== prevProps.selectedArgument) {\n            this.updateTree(this.props.selectedArgument);\n        }\n\n    }\n\n    render() {\n        return (\n            <Container>\n                <div style={{backgroundColor:'#EFEFEF', borderRadius: '5px', paddingLeft:'5px'}}>\n                Dialectical Tree\n                </div>\n                <div ref={this.myTreeNetwork} style={{ height: \"86vh\", borderStyle:'groove', borderWidth: '0.2px', borderTop: '0' }} />\n            </Container>\n        )\n    }\n}\n\nexport default VisLibTrees;","import React from \"react\";\nimport { examplePrograms } from './examplePrograms';\nimport { generate_graph_structures, generate_tree_graph_structures } from \"./DataParsing\";\nimport Generators from './generators/generators';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport VisNetworkDeLPGraph from './visLibDeLPGraph'\nimport VisLibTrees from \"./visLibTrees\";\nimport Spinner from 'react-bootstrap/Spinner'\n\n//const URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst URLtoCore = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/bridge.php';\n\nconst axios = require('axios');\n\nconst containersStyleTEST = {\n  marginTop: \"10px\",\n  width: \"100%\"\n}\n\n\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\",\n  height: \"70vh\",\n  marginTop: \"5px\"\n}\n\nclass ModalDeLP extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps){\n    const visible = this.props.modalInfo.visible;\n    const msg = this.props.modalInfo.msg;\n    if (visible !== prevProps.modalInfo.visible){\n      this.setState({modalInfo: {visible: visible, msg: msg}})\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <Modal\n      show={this.state.modalInfo['visible']}\n      size=\"sm\"\n      centered\n    >\n      <Modal.Header>\n      </Modal.Header>\n      <Modal.Body>\n        <p className=\"text-center\">\n        {this.state.modalInfo['msg']}\n        <Spinner animation=\"grow\" size='sm' variant=\"primary\"/>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n      </Modal.Footer>\n    </Modal>\n      </>\n    );\n  }\n}\n\n\nclass ExamplePrograms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedProgram: \"2\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  componentDidMount() {\n    this.setState({\n      selectedProgram: examplePrograms[\"2\"]\n    });\n    this.props.handleTextChange(examplePrograms[\"2\"]);\n  }\n\n  handleChange(event, program) {\n    this.setState({\n      selectedProgram: event.target.value\n    });\n    this.props.handleTextChange(program);\n  };\n\n  createSelectItems() {\n    let items = [];\n    items.push(<option key={-1} value=\"Write your program or select one of the examples.\">Select an example</option>);\n    for (var key in examplePrograms) {\n      items.push(<option key={key} value={examplePrograms[key]}>Example {key}</option>);\n    }\n    return items\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state.selectedProgram}\n        onChange={(e) => this.handleChange(e, e.target.value)}\n        ref={this.refExample}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\n/* function SelectPreferenceCriterion() {\n  return (\n    <Container>\n      <Row>\n        <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"sm\" block>\n          Pref. Criterion\n        </Button>\n      </Row>\n    </Container>\n  )\n} */\n\nclass AnalyzeProgramButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  setResponse(response) {\n    this.props.handleResponse(response);\n  }\n\n  handleModalChange(value, msg){\n    this.props.handleModalChange(value, msg);\n  }\n\n  componentDidMount() {\n    this.AnalyzeButtonRef.current.click();\n  }\n\n  parseProgram(program){\n    let newProgram = ''\n    const rules = program.split(/\\r?\\n/);\n    for (const rule of rules){\n      if(!(rule.includes('<-') || rule.includes('-<'))){\n        if(!rule.includes('use_criterion') && rule !== ''){\n          newProgram = newProgram + rule.replace('.','<- true.') + '\\n';\n        }else{\n          newProgram = newProgram + rule + '\\n';\n        }\n      }\n      else{\n        newProgram = newProgram + rule + '\\n';\n      }\n    }\n    return newProgram;\n  }\n\n  handleOnClick() {\n    let self = this;\n    this.handleModalChange(true, 'Analyzing program...');\n    let delpProgram = this.props.program;\n    let parserProgram = self.parseProgram(delpProgram);\n    let formData = new FormData();\n    formData.append('delp', parserProgram);\n    formData.append('version', '2018');\n    formData.append('action', 'makeDelp');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n      .then(function (response) {\n        //console.log(\"Core Response: \", response.data);\n        self.setResponse(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Analyze DeLP\n      </Button>\n    )\n  }\n}\n\nclass ProgramMenu extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleLoadClick = this.handleLoadClick.bind(this);\n    this.refInput = React.createRef();\n  };\n  \n  handleChange(optionValue) {\n    this.props.handleTextChange(optionValue)\n  };\n\n  handleLoadClick(){\n    this.refInput.current.click();\n  }\n\n  handleInputChange(programName){\n    let self = this;\n    console.log(programName);\n    if (programName) {\n        var reader = new FileReader();\n        reader.readAsText(programName, 'utf-8');\n        reader.onload = function (evt) {\n            let program = evt.target.result;\n            self.props.handleTextChange(program)\n        }\n        reader.onerror = function (evt) {\n            alert(\"error reading file\");\n        }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col md=\"6\"><ExamplePrograms handleTextChange={this.handleChange} /></Col>\n          <Col md=\"6\">\n            <input \n              type=\"file\"\n              accept=\".delp\"\n              className=\"d-none\"\n              ref={this.refInput}\n              onChange={(e)=>this.handleInputChange(e.target.files[0])}/>\n              <Button \n                style={{ backgroundColor: '#337ab7', border: '0px', width:'100%'}} \n                size=\"sm\"\n                onClick={this.handleLoadClick}>Load</Button>\n          </Col>\n        </Row>\n        <Row style={{ marginTop: \"3px\" }}>\n          {/* <Col md=\"12\"><Generators showGeneratedProgram={this.handleChange} /></Col> */}\n          {/* <Col md=\"6\"><SelectPreferenceCriterion /></Col> */}\n        </Row>\n      </div>\n    )\n  }\n}\n\nclass TextAreaProgram extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.handleTextChange(e.target.value)\n  }\n\n  render() {\n    return (\n      <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Control as=\"textarea\" style={textAreaProgramStyle} spellCheck=\"false\" value={this.props.value} onChange={this.handleChange} />\n      </Form.Group>\n    )\n  }\n}\n\nclass AppDeLP extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"DeLP Component created...\");\n    this.state = {\n      delpProgram: examplePrograms[\"2\"],\n      coreResponse: '',\n      dGraph: '',\n      trees: '',\n      selectedArgument: '',\n      delpSemantic: '',\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n    this.handleProgramChange = this.handleProgramChange.bind(this);\n    this.handleResponse = this.handleResponse.bind(this);\n    this.handleSelectedArgument = this.handleSelectedArgument.bind(this);\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  handleModalChange(value, msg){\n    this.setState({modalInfo:{\n      visible: value,\n      msg: msg\n    }});\n  }\n\n  handleProgramChange(value) {\n    this.setState({ delpProgram: value });\n  }\n\n  handleResponse(coreResponse) {\n    let structures;\n    let trees;\n    try{\n      structures = generate_graph_structures(coreResponse.dGraph);\n      trees = generate_tree_graph_structures(coreResponse.status);\n    } catch(error){\n      this.handleModalChange(true, 'Program error... Abort.');\n      throw new Error(\"Something went badly wrong!\");\n    }\n    this.setState({\n      coreResponse: coreResponse,\n      dGraph: {\n        argumentsObject: trees[1],\n        defeatsObject: structures.defeatsObject,\n        defeatsObjectDung: structures.defeatsObjectDung,\n        subArgumentsObject: structures.subArgumentsObject\n      },\n      trees: trees[0],\n      selectedArgument: Object.keys(trees[0])[0],\n      delpSemantic: trees[2]\n    });\n    this.props.handleGlobalResponseChange({\n      argumentsObjectDung: structures.argumentsObjectDung,\n      defeatsObjectDung: structures.defeatsObjectDung,\n      argumentsDung: structures.argumentsDung,\n      attacksDung: structures.attacksDung,\n      delpSemantic: trees[2]\n    });\n  }\n\n  handleSelectedArgument(selectedArgument) {\n    if (selectedArgument !== this.state.selectedArgument) {\n      console.log(\"Selected argument: \", selectedArgument);\n      this.setState({\n        selectedArgument: selectedArgument\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row style={{height: \"95vh\"}}>\n          <Col lg=\"3\" style={containersStyleTEST}>\n            <label>Program</label>\n            <ProgramMenu handleTextChange={this.handleProgramChange} />\n            <TextAreaProgram value={this.state.delpProgram}\n              handleTextChange={this.handleProgramChange} />\n            <AnalyzeProgramButton program={this.state.delpProgram}\n              handleResponse={this.handleResponse} \n              handleModalChange={this.handleModalChange}/>\n            <ModalDeLP modalInfo={this.state.modalInfo}/>  \n          </Col>\n          <Col lg=\"5\" style={containersStyleTEST}>\n            <VisNetworkDeLPGraph delpGraph={this.state.dGraph}\n              handleNotifyArgumentSelected={this.handleSelectedArgument} \n              handleModalChange={this.handleModalChange}/>\n          </Col>\n          <Col lg=\"4\" style={containersStyleTEST}>\n            <VisLibTrees selectedArgument={this.state.trees[this.state.selectedArgument]}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDeLP;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport Container from 'react-bootstrap/Container'\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDungGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n    }\n\n    \n    componentDidMount(){\n        this.network = new Network(this.myDungGraphNetwork.current, {nodes:this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs}, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.fit();\n    }\n\n    updateNetwork(newData){\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.nodes, edges:newData.arcs});\n        console.log(\"Dung Graph updated...\");\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.dungGraph !== prevProps.dungGraph){\n            this.updateNetwork(this.props.dungGraph);\n        }\n    }\n\n    render(){\n        return(\n            <Container>\n                <div style={{backgroundColor:'#EFEFEF', borderRadius: '5px', paddingLeft:'5px'}}>Dung Graph</div>\n                <div ref={this.myDungGraphNetwork} style={{height: \"84vh\", borderStyle:'groove', borderWidth: '0.2px', borderTop: '0'}}/>\n            </Container>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport Container from 'react-bootstrap/Container'\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\nfunction TitleExtension(props) {\n    const extension = props['extensionData']['extension'];\n    //const extensionIndex = props['extensionData']['id'];\n    if (extension.lenght === 0) {\n        return 'Extensions not comp'\n    } else {\n        return 'Extension'\n    }\n}\n\nclass VisNetworkDungGraphExtensions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n        this.handleModalChange = this.handleModalChange.bind(this);\n    }\n\n    handleModalChange(value, msg) {\n        this.props.handleModalChange(value, msg);\n    }\n\n    dungGraphNetworkEvents() {\n        //let self = this;\n        //Here define the associadted events with the network\n        this.network.on(\"click\", function (params) {\n            let selectedArgument = params.nodes[0];\n            if (selectedArgument) {\n                // To notify when an argument is selected on network\n                //self.selectedArgument = selectedArgument;\n                //self.notifyArgumentSelected();\n            }\n        });\n        this.network.on(\"stabilizationIterationsDone\", function (params) {\n            //console.log(\"Finish Dung draw\");\n        });\n    }\n\n    componentDidMount() {\n        //console.log(\"Drawing Dung Graph...\");\n        this.network = new Network(this.myDungGraphNetwork.current, { nodes: this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs }, options);\n        this.updateNetworkExtension(this.props.extension);\n        this.dungGraphNetworkEvents();\n\n    }\n\n    updateNetwork(newData) {\n        console.log(\"Updating Dung Graph...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({ nodes: newData.nodes, edges: newData.arcs });\n    }\n\n    updateNetworkExtension(extension) {\n        console.log(\"Draw extensions change\", typeof extension['extension']);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        let nodes = this.props.dungGraph.nodes;\n        if (extension['extension'].length === 0) {\n            for (const node of nodes) {\n                this.network.body.data.nodes.update([{\n                    id: node['id'],\n                    color: '#97C2FC'\n                }]);\n            }\n            /* nodes.map(node => {\n                this.network.body.data.nodes.update([{\n                    id: node['id'],\n                    color: '#97C2FC'\n                }]);\n            }) */\n        } else {\n            for (const node of nodes) {\n                if (extension['extension'].includes(node['id'])) {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#33FF6B'\n                    }]);\n                } else {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#ff6666'\n                    }]);\n                }\n            }\n            /* nodes.map(node => {\n                if (extension['extension'].includes(node['id'])) {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#33FF6B'\n                    }]);\n                } else {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#ff6666'\n                    }]);\n                }\n            }) */\n        }\n        this.handleModalChange(false, '');\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dungGraph !== prevProps.dungGraph) {\n            this.updateNetwork(this.props.dungGraph);\n        }\n        if (this.props.extension !== prevProps.extension) {\n            this.updateNetworkExtension(this.props.extension);\n        }\n    }\n\n    render() {\n        return (\n            <Container>\n                <div style={{ backgroundColor: '#EFEFEF', borderRadius: '5px', paddingLeft: '5px' }}>\n                    <TitleExtension extensionData={this.props.extension} />\n                </div>\n                <div ref={this.myDungGraphNetwork} style={{ height: \"84vh\", borderStyle:'groove', borderWidth: '0.2px', borderTop: '0' }} />\n            </Container>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraphExtensions;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport VisNetworkDungGraph from './visLibDungGraph'\nimport VisNetworkDungGraphExtensions from './visLibDungGraphExtensions'\nimport Modal from 'react-bootstrap/Modal'\nimport Spinner from 'react-bootstrap/Spinner'\n\n//const URLtoDungSolvers = 'http://localhost/daqapClient/bridge/callSolver.php';\nconst URLtoDungSolvers = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/callSolver.php';\n\nconst axios = require('axios');\n\nconst containersStyleTESTDung = {\n  marginTop: \"5px\",\n  width: \"100%\"\n}\n\nclass ModalDung extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      modalInfo:{\n        visible: false,\n        msg:''\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps){\n    const visible = this.props.modalInfo.visible;\n    const msg = this.props.modalInfo.msg;\n    if (visible !== prevProps.modalInfo.visible){\n      this.setState({modalInfo: {visible: visible, msg: msg}})\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <Modal\n      show={this.state.modalInfo['visible']}\n      size=\"sm\"\n      centered\n    >\n      <Modal.Header>\n      </Modal.Header>\n      <Modal.Body>\n        <p className=\"text-center\">\n        {this.state.modalInfo['msg']}\n        <Spinner animation=\"grow\" size='sm' variant=\"primary\"/>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n      </Modal.Footer>\n    </Modal>\n      </>\n    );\n  }\n}\n\nclass QuerySemantic extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  handleModalChange(value, msg){\n    this.props.handleModalChange(value, msg);\n  }\n\n  setResponse(response) {\n    this.props.handleSemanticCompute(response);\n  }\n\n  handleOnClick() {\n    let self = this;\n    const semantic = this.props.selectedSemantic;\n    const semExtensions = this.props.semantics[semantic];\n    if (semExtensions.length === 0) {\n      self.handleModalChange(true, 'Consulting semantics to ' + this.props.selectedSolver);\n      let formData = new FormData();\n      for (var i = 0; i < this.props.args.length; i++) {\n        formData.append('arguments[]', this.props.args[i]);\n      }\n      for (var j = 0; j < this.props.attacks.length; j++) {\n        formData.append('attacks[]', this.props.attacks[j]);\n      }\n      formData.append('semantics', this.props.selectedSemantic);\n      formData.append('solver', this.props.selectedSolver);\n      formData.append('action', 'solver');\n      //Show a loader?\n      axios.post(URLtoDungSolvers, formData)\n        .then(function (response) {\n          console.log(\"Solver Response: \", response['data']);\n          let extensions = response['data'][semantic];\n          if (Array.isArray(extensions[0])) {\n            let toNumberFormat = extensions.map((extension) => {\n              return extension.map(Number);\n            });\n            self.setResponse(toNumberFormat);\n          } else {\n            let toNumberFormat = extensions.map(Number);\n            self.setResponse([toNumberFormat]);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } else {\n      console.log(\"Semantics already computed: \", this.props.selectedSemantic);\n    }\n\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' , marginTop:'28px'}} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Query\n      </Button>\n    )\n  }\n}\n\nclass SelectExtension extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.refExtension = React.createRef();\n  };\n\n  handleChange(extension) {\n    console.log(extension);\n    this.props.handleChangeExtension(extension);\n  };\n\n  componentDidUpdate(prevProps) {\n    const newExtensions = this.props.extensions;\n    if (prevProps['extensions'] !== newExtensions) {\n      if (newExtensions.length !== 0) {\n        this.handleChange(newExtensions[0]);\n      }else{\n        this.handleChange([]);\n      }\n    }\n  }\n\n  createSelectItems() {\n    let items = [];\n    let extensions = this.props.extensions;\n    if (extensions.length !== 0) {\n      for (var key in extensions) {\n        items.push(<option key={key} value={extensions[key]}>{String(key + ':  {' + extensions[key] + '}')}</option>);\n      }\n    } else {\n      items.push(<option key={-1} value={[]}>{String(\"Not computed\")}</option>);\n    }\n    return items;\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom\n        onChange={(e) =>{\n          const in_array = e.target.value.split(',').map(function(item) {\n            return parseInt(item, 10);\n          });\n          this.handleChange(in_array)}}\n        ref={this.refExtension}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSemantic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSemantic: \"delp\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  handleChange(semantic) {\n    this.setState({\n      selectedSemantic: semantic\n    });\n    this.props.handleChangeSemantic(semantic);\n  };\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state['selectedSemantic']}\n        onChange={(e) => this.handleChange(e.target.value)}\n        ref={this.refExample}>\n        <option key={1} value=\"delp\">DeLP</option>\n        <option key={2} value=\"grounded\">Grounded</option>\n        <option key={3} value=\"preferred\">Preferred</option>\n        <option key={4} value=\"stable\">Stable</option>\n        <option key={5} value=\"semistable\">Semistable</option>\n        {/* <option key={6} value=\"allSemantics\">All Semantics</option> */}\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSolver extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedSolver: 'ArgTech'\n    };\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ selectedSolver: newSolver });\n    this.props.handleChangeSolver(newSolver);\n  };\n\n  render() {\n    return (\n      <Form>\n        <label>Select solver:</label>\n        <div key={`solvers`} className=\"mb-3\" onChange={(e) => this.handleChangeSolver(e.target.id)}>\n          <Form.Check\n            inline\n            label=\"jArgSemSat\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`jArgSemSat`}\n            disabled\n          />\n          <Form.Check\n            inline\n            label=\"Arg-Tech\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`ArgTech`}\n            defaultChecked\n          />\n        </div>\n      </Form>\n    )\n  }\n}\n\nclass AppDung extends React.Component {\n  constructor(props) {\n    console.log(\"Dung Component created...\");\n    super(props);\n    this.state = {\n      'dungGraph': { 'nodes': this.props.dungGraph.argumentsObjectDung, 'arcs': this.props.dungGraph.defeatsObjectDung },\n      'solverData': { 'args': this.props.dungGraph.argumentsDung, 'attacks': this.props.dungGraph.attacksDung },\n      'selectedSemantic': 'delp',\n      'semantics': {\n        'delp': [this.props.dungGraph.delpSemantic],\n        'grounded': [],\n        'preferred': [],\n        'stable': [],\n        'semistable': []\n      },\n      'extension': {\n        'semantic': 'delp',\n        'extension': this.props.dungGraph.delpSemantic\n      },\n      'solver': 'ArgTech',\n      'modalInfo': {\n        visible: false,\n        msg: ''\n      }\n    };\n    this.handleChangeSemantic = this.handleChangeSemantic.bind(this);\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n    this.handleChangeExtension = this.handleChangeExtension.bind(this);\n    this.handleSemanticCompute = this.handleSemanticCompute.bind(this);\n    this.handleModalChange = this.handleModalChange.bind(this);\n  };\n\n  handleModalChange(value,msg){\n    this.setState({modalInfo: {\n      visible: value,\n      msg: msg\n    }});\n  }\n\n  handleChangeSemantic(newSemantic) {\n    this.setState({ 'selectedSemantic': newSemantic });\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ 'solver': newSolver });\n  }\n\n  handleChangeExtension(extension) {\n    const selectedSemantic = this.state['selectedSemantic'];\n    this.setState({ 'extension': { 'semantic': selectedSemantic, 'extension': extension } });\n    //console.log(\"Semantic: \" + selectedSemantic + ' Id: ' + extension['id'] + 'ext: ' + extension['extension']);\n  }\n\n  handleSemanticCompute(semanticExtensions) {\n    const selectedSemantic = this.state['selectedSemantic'];\n    var semantics = { ...this.state['semantics'] };\n    semantics[selectedSemantic] = semanticExtensions;\n    this.setState({ semantics });\n  }\n\n  componentDidUpdate(prevProps) {\n    const newDungGrapg = this.props.dungGraph.argumentsDung;\n    if (prevProps.dungGraph.argumentsDung !== newDungGrapg){\n      this.setState({\n        dungGraph: { 'nodes': this.props.dungGraph.argumentsObjectDung, 'arcs': this.props.dungGraph.defeatsObjectDung },\n        solverData: { 'args': this.props.dungGraph.argumentsDung, 'attacks': this.props.dungGraph.attacksDung },\n        'selectedSemantic': 'delp',\n        'semantics': {\n          'delp': [this.props.dungGraph.delpSemantic],\n          'grounded': [],\n          'preferred': [],\n          'stable': [],\n          'semistable': []\n        },\n        'extension': {\n          'semantic': 'delp',\n          'extension': this.props.dungGraph.delpSemantic\n        },\n        'solver': 'ArgTech',\n        'modalInfo': {\n          visible: false,\n          msg: ''\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid style={containersStyleTESTDung}>\n        <Row style={{}}>\n          <Col lg='2' >\n            <label>Select Semantic:</label>\n            <SelectSemantic handleChangeSemantic={this.handleChangeSemantic} />\n          </Col>\n          <Col lg='3'>\n            <SelectSolver handleChangeSolver={this.handleChangeSolver} />\n          </Col>\n          <Col lg='2'>\n            <QuerySemantic selectedSemantic={this.state['selectedSemantic']}\n              selectedSolver={this.state['solver']}\n              args={this.state['solverData']['args']}\n              attacks={this.state['solverData']['attacks']}\n              semantics={this.state['semantics']}\n              handleSemanticCompute={this.handleSemanticCompute} \n              handleModalChange = {this.handleModalChange}/>\n              <ModalDung modalInfo={this.state.modalInfo}/>\n          </Col>\n          <Col lg='4'>\n            <label>Select Extension:</label>\n            <SelectExtension extensions={this.state['semantics'][this.state['selectedSemantic']]}\n              handleChangeExtension={this.handleChangeExtension} />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"6\">\n            <VisNetworkDungGraph dungGraph={this.state['dungGraph']} />\n          </Col>\n          <Col lg=\"6\">\n            <VisNetworkDungGraphExtensions dungGraph={this.state['dungGraph']}\n              extension={this.state['extension']} handleModalChange={this.handleModalChange}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDung;\n","import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\n//import { Container, Tabs, Tab, Row, Col } from 'react-bootstrap'\nimport AppDeLP from './delp/delp'\nimport AppDung from './dung/dung'\n\nclass DAQAP extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            argumentsObjectDung: '',\n            defeatsObjectDung: '',\n            argumentsDung: '',\n            attacksDung: '',\n            delpSemantic: ''\n        };\n        this.handleResponse = this.handleResponse.bind(this);\n    }\n\n    handleResponse(response) {\n        this.setState(response);\n    }\n\n    render() {\n        return (\n            <div>\n                <AppDeLP handleGlobalResponseChange={this.handleResponse} />\n                <AppDung dungGraph={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default DAQAP;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport HomeComponent from './info/home'\nimport DAQAP from './daqap'\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink,\n\tNavLink\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Navbar expand=\"sm\" style={{ height: \"30px\", backgroundColor: '#337ab7' }}>\n\t\t\t\t\t<Navbar.Brand as={Link} to=\"/~daqap/index\" style={{ color: 'white', fontSize: '12px' }}>DAQAP (Release Candidate 0.1)</Navbar.Brand>\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/~daqap/index\" style={{ color: 'white' }}>Home</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/~daqap/daqap\" style={{ color: 'white' }}>Daqap</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/~daqap/index\">\n\t\t\t\t\t\t<HomeComponent />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/~daqap/daqap\">\n\t\t\t\t\t\t<DAQAP />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sectionProgram.a5696edb.png\";","module.exports = __webpack_public_path__ + \"static/media/legend.f8063e41.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionDelpGraph.b643793f.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionTree.55c134b4.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionTree2.25be23d2.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionView1.6d442430.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionView2.d538d827.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionView3.4015112f.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionView4.a1880718.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionForDungGraph.c740f1b5.png\";","module.exports = __webpack_public_path__ + \"static/media/sectionForDungExtension.b81d11c4.png\";"],"sourceRoot":""}