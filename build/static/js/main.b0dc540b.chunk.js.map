{"version":3,"sources":["info/home.js","delp/examplePrograms.js","delp/utilsDeLP.js","delp/DataParsing.js","delp/generators/generators.js","delp/views.js","delp/visLibDeLPGraph.js","delp/visLibTrees.js","delp/delp.js","dung/visLibDungGraph.js","dung/visLibDungGraphExtensions.js","dung/dung.js","daqap.js","App.js","serviceWorker.js","index.js"],"names":["HomeComponent","examplePrograms","getFormatedArgumentBody","argument","replace","argumentsObject","argumentsObjectDung","subargumentsObject","defeatsObject","defeatsObjectDung","argumentsDung","attacksDung","delpSemantic","argIndex","load_arguments","args","map","id","Object","keys","push","utils","conclusion","color","size","vadjust","align","defeats","defeater","defeated","defeatType","arcLabel","arrows","to","enabled","type","highlight","hover","load_defeaters","subarguments","subargument","width","load_subarguments","trees","treesGlobal","get_labeled_tree","current","tree","obj","childs","parent","list","count","length","get_childs","tempObj","children","state","get_dialectical_tree","root","typeDefeat","nodes","edges","status","find","element","label","lines","arrayObject","value","defeat","from","dashes","generate_tree_graph_structures","jsonCoreResponseStatus","roots","tempLines","estado","entries","treesAndGuarantedd","Array","isArray","filter","elem","x","indexOf","localeCompare","build_trees_global","labeledArguments","axios","require","textAreaProgramStyle","resize","fontFamily","fontSize","height","paramsForRandomProgramGen2","React","Component","Generators","Views","props","handleChangeViews","bind","subArgumentRel","createRef","typesDefeats","attackTypeInternal","attackTypeConclusion","statusArguments","settingViews","optionSubArgumentRelation","this","checked","optionTypeDefeater","optionsAttacksPointsInternal","optionsAttackPointsConclusion","optionStatusArguments","handleViewsChange","style","position","zIndex","Accordion","defaultActiveKey","Card","Toggle","as","Header","eventKey","paddingTop","backgroundColor","paddingBottom","Collapse","Body","FormGroup","Form","onChange","Check","defaultChecked","ref","marginLeft","data","DataSet","options","fixed","scaling","arrowStrikethrough","interaction","physics","solver","forceAtlas2Based","springConstant","centralGravity","avoidOverlap","layout","randomSeed","VisNetworkDeLPGraph","selectedArgument","myDeLPGraphNetwork","updateNetwork","dGraphNetworkEvents","notifyArgumentSelected","defineView","network","handleModalChange","msg","viewsSetting","adaptedDefeatsObject","JSON","parse","stringify","delpGraph","adaptedArgumentsObject","forEach","subsArg","subArgumentsObject","newDefeatsObject","handleNotifyArgumentSelected","self","on","params","Network","setOptions","newData","setData","concat","prevProps","smooth","hierarchical","sortMethod","VisLibTrees","myTreeNetwork","updateTree","containersStyleTEST","marginTop","ModalDeLP","modalInfo","visible","setState","Modal","show","centered","className","Spinner","animation","variant","Footer","ExamplePrograms","selectedProgram","handleChange","refExample","handleTextChange","event","program","target","items","key","Control","custom","e","createSelectItems","AnalyzeProgramButton","handleOnClick","setResponse","AnalyzeButtonRef","response","handleResponse","click","newProgram","rules","split","rule","includes","delpProgram","parserProgram","parseProgram","formData","FormData","append","post","then","catch","error","console","log","Button","border","block","onClick","ProgramMenu","handleInputChange","handleLoadClick","refInput","optionValue","programName","reader","FileReader","readAsText","onload","evt","result","onerror","alert","Row","Col","md","accept","files","TextAreaProgram","Group","controlId","spellCheck","AppDeLP","coreResponse","dGraph","handleProgramChange","handleSelectedArgument","structures","jsonCoreResponseDGraph","literal","attack","values","Error","handleGlobalResponseChange","Container","fluid","lg","VisNetworkDungGraph","myDungGraphNetwork","dungGraph","arcs","fit","TitleExtension","lenght","VisNetworkDungGraphExtensions","updateNetworkExtension","extension","dungGraphNetworkEvents","node","body","update","extensionData","containersStyleTESTDung","ModalDung","QuerySemantic","handleSemanticCompute","semantic","selectedSemantic","semantics","selectedSolver","i","j","attacks","extensions","toNumberFormat","Number","SelectExtension","refExtension","handleChangeExtension","newExtensions","String","in_array","item","parseInt","SelectSemantic","handleChangeSemantic","SelectSolver","handleChangeSolver","newSolver","inline","name","disabled","AppDung","newSemantic","semanticExtensions","newDungGrapg","solverData","DAQAP","App","Navbar","expand","Brand","Link","aria-controls","Nav","NavLink","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b0dc540b.chunk.js","sourcesContent":["import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction HomeComponent (){\n    return (\n      <p>Documentation or Tutorial</p>\n    )\n}\n\nexport default HomeComponent;\n","// This file contain the DeLP programs used as examples for the platform\nexport const examplePrograms = {\n    \"0\": \"use_criterion(more_specific).\\n\\n\" +\n        \"fly(X) -< bird(X).\\n\" +\n        \"bird(X) <- chicken(X).\\n\" +\n        \"bird(X) <- penguin(X).\\n\" +\n        \"bird(X) <- duck(X).\\n\" +\n        \"bird(X) <- rhea(X).\\n\" +\n        \"~fly(X) <- penguin(X).\\n\" +\n        \"~fly(X) -< chicken(X).\\n\" +\n        \"~fly(X) -< baby(X).\\n\" +\n        \"fly(X) -< chicken(X), scared(X).\\n\\n\" +\n\n        \"chicken(little).\\n\" +\n        \"chicken(koko).\\n\" +\n        \"scared(koko).\\n\" +\n        \"chicken(lily).\\n\" +\n        \"scared(lily).\\n\" +\n        \"penguin(chilly).\\n\" +\n        \"duck(tiny).\\n\" +\n        \"baby(tiny).\\n\" +\n        \"rhea(charito).\",\n\n    \"1\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"2\": \"use_criterion(more_specific).\\n\\n\" +\n        \"surf -< nice, spare_time.\\n\" +\n        \"nice -< waves.\\n\" +\n        \"~nice -< rain.\\n\" +\n        \"rain -< cloudy.\\n\" +\n        \"~rain -< dry_season.\\n\" +\n        \"spare_time -< ~busy.\\n\" +\n        \"~busy -< ~working.\\n\" +\n        \"cold -< winter.\\n\" +\n        \"working -< monday.\\n\" +\n        \"busy -< yard_work.\\n\" +\n        \"yard_work -< grass_grown.\\n\" +\n        \"~yard_work -< hire_gardener.\\n\" +\n        \"many_surfers -< waves.\\n\" +\n        \"~many_surfers -< monday.\\n\\n\" +\n\n        \"monday.\\n\" +\n        \"cloudy.\\n\" +\n        \"dry_season.\\n\" +\n        \"waves.\\n\" +\n        \"grass_grown.\\n\" +\n        \"hire_gardener.\\n\" +\n        \"vacation.\\n\" +\n        \"~working <- vacation.\\n\" +\n        \"few_surfers <- ~many_surfers.\\n\" +\n        \"~surf <- ill.\",\n\n    \"3\": \"use_criterion(more_specific).\\n\\n\" +\n        \"r -< s.\\n\" +\n        \"~h -< d,t.\\n\" +\n        \"s -< d.\\n\" +\n        \"~e -< ~h, ~a.\\n\" +\n        \"s -< h.\\n\" +\n        \"~i -< ~a, s.\\n\" +\n        \"h -< d.\\n\" +\n        \"h -< b.\\n\" +\n        \"a -< t.\\n\" +\n        \"~f -< ~e.\\n\\n\" +\n\n        \"~a.\\n\" +\n        \"t.\\n\" +\n        \"b.\\n\" +\n        \"d <- t.\",\n\n    \"4\": \"has_priority((a-<d,b,c),(~a-<b,c)).\\n\" +\n        \"has_priority((~a-<b,c),(a-<b)).\\n\\n\" +\n\n        \"use_criterion(rules_priorities).\\n\\n\" +\n\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"5\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a -< x.\\n\" +\n        \"a -< y.\\n\" +\n        \"~a -< x,y.\\n\" +\n        \"~a -< z.\\n\" +\n        \"a -< x,y,z.\\n\" +\n        \"~a -< w,z.\\n\" +\n        \"a -< w.\\n\\n\" +\n\n        \"x.\\n\" +\n        \"y.\\n\" +\n        \"z.\\n\" +\n        \"w.\",\n\n    \"6\": \"use_criterion(more_specific).\\n\" +\n\n        \"a-<b.\\n\\n\" +\n\n        \"~a-<b,c.\\n\" +\n        \"~a-<b,d.\\n\" +\n        \"~a-<b,e.\\n\\n\" +\n\n        \"a-<b,z,c.\\n\" +\n        \"a-<b,z,d.\\n\" +\n        \"a-<b,z,e.\\n\\n\" +\n\n        \"a-<b,c,d,e.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\\n\" +\n        \"e.\\n\" +\n        \"z.\"\n\n    /* \"7\": \"use_criterion(more_specific).\\n\\n\" +\n\n        \"~culpable(X) -< not culpable(X).\\n\" +\n        \"~preso(X) <- inocente(X).\\n\" +\n        \"inocente(X) <- ~culpable(X).\\n\" +\n        \"preso(X) -< not culpable(X), alta-sospecha(X).\\n\" +\n        \"alta-sospecha(pepe) .\" */\n\n}\n","export function getFormatedArgumentBody(argument) {\n    return argument.replace(/-</g, \"⤙\").replace(/_G[0-9]+/g, \"X\").replace(/<-/g, \"⇽\");\n}\n\nexport function valueExistsinObjectArray(arrayObject, value) {\n    for (var count = 0; count < arrayObject.length; count++) {\n        if (arrayObject[count].id === value) {\n            return true;\n        }\n    }\n\n    return false;\n}","import * as utils from \"./utilsDeLP\";\n\n// Global structures\nlet argumentsObject = [];\nlet argumentsObjectDung = [];\nlet subargumentsObject = [];\nlet defeatsObject = [];\nlet defeatsObjectDung = [];\nlet argumentsDung = {}; //argument:id\nlet attacksDung = []; //Tuples of (from, to)\nlet delpSemantic = []; //Ids of warrant arguments\nlet argIndex = 0;\n\n// Build the Defeats object for the DeLP Graph\nfunction load_defeaters(defeater, defeated) {\n    let defeatType;\n    let arcLabel;\n    //To set the type of defeat (proper or blocking) Check this!\n    defeater['defeaterType'] === 'proper' ? defeatType = true : defeatType = false;\n\n    //To set the type of attack (conclusion or internal)\n    defeater['innerPoint'] === defeated.conclusion ? arcLabel = 'C' : arcLabel = 'I';\n\n    //Load the defeats object\n    defeatsObject.push({\n        'from': utils.getFormatedArgumentBody(defeater['defeat']),\n        'to': utils.getFormatedArgumentBody(defeated.id),\n        arrows: {\n            to: {\n                enabled: true,\n                type: 'arrow'\n            }\n        },\n        'color': {\n            color: '#d9534f',\n            highlight: 'red',\n            hover: 'red'\n        },\n        'width': 3,\n        'label': arcLabel,\n        'dashes': defeatType,\n        'font': {\n            color: 'black',\n            size: 18,\n            align: 'top'\n        }\n    });\n\n\n\n}\n\n// Build the SubArguments object for the DeLP Graph\nfunction load_subarguments(subargument, argument) {\n    if (subargument !== argument.id) {\n        subargumentsObject.push({\n            'from': utils.getFormatedArgumentBody(subargument),\n            'to': utils.getFormatedArgumentBody(argument.id),\n            arrows: {\n                to: {\n                    enabled: true,\n                    type: 'circle'\n                }\n            },\n            color: {\n                color: '#5bc0de',\n                highlight: '#5bc0de',\n                hover: '#5bc0de'\n            },\n            width: 3\n        });\n    }\n}\n\n// Build the Arguments Object for the DeLP Graph\nfunction load_arguments(args) {\n    args.map(argument => {\n        let id = Object.keys(argument)[0];\n        argumentsObject.push({\n            'id': utils.getFormatedArgumentBody(id),\n            'label': argument[id].conclusion + '\\n\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'triangle',\n            'size': '40'\n        });\n        argumentsObjectDung.push({\n            'id': argIndex,\n            'label': argument[id].conclusion + '\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'dot',\n            'size': '40'\n        });\n        argumentsDung[utils.getFormatedArgumentBody(id)] = argIndex;\n        argument[id].defeats.map(defeater => load_defeaters(defeater, argument[id]));\n        argument[id].subarguments.map(subargument => load_subarguments(subargument, argument[id]));\n        argIndex = argIndex + 1;\n    });\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the DeLP Graph\nexport function generate_graph_structures(jsonCoreResponseDGraph) {\n    //console.log(\"Parsing DeLP Core response (DGraph)...\")\n    argumentsObject = [];\n    argumentsObjectDung = [];\n    subargumentsObject = [];\n    defeatsObject = [];\n    defeatsObjectDung = [];\n    argumentsDung = {};\n    attacksDung = [];\n    delpSemantic = [];\n    argIndex = 0;\n\n    jsonCoreResponseDGraph.map(literal => {\n        let key = Object.keys(literal)[0];\n        load_arguments(literal[key]);\n    });\n    defeatsObject.map(attack => {\n        attacksDung.push('(' + argumentsDung[attack['from']] + ',' + argumentsDung[attack['to']] + ')');\n        defeatsObjectDung.push({ 'from': argumentsDung[attack['from']], 'to': argumentsDung[attack['to']], 'arrows': 'to', 'width': 3 })\n    });\n    return {\n        'argumentsObject': argumentsObject,\n        'argumentsObjectDung': argumentsObjectDung,\n        'subArgumentsObject': subargumentsObject,\n        'defeatsObject': defeatsObject,\n        'defeatsObjectDung': defeatsObjectDung,\n        'argumentsDung': Object.values(argumentsDung),\n        'attacksDung': attacksDung\n    };\n}\n\n/////////////////////\n// For tree graphs //\n/////////////////////\n\n// Global structures\nlet trees = {}\nlet treesGlobal = {}\n\n// To get the type of a defeat relation\nfunction get_type_defeat(argument, defeater) {\n    let typeDefeat = defeatsObject.find(defeat => defeat.from === utils.getFormatedArgumentBody(defeater) && defeat.to === utils.getFormatedArgumentBody(argument));\n    return typeDefeat.dashes;\n}\n\n// Returns all children of a parent in the tree structure\nfunction get_childs(parent, list) {\n    let childs = [];\n    for (var count = 0; count < list.length; count++) {\n        if (list[count][2] === parent) {\n            childs.push(list[count]);\n        }\n    }\n    return childs;\n}\n\n// Return the state of the root\nfunction get_labeled_tree(current, tree, obj) {\n    let childs = get_childs(current, tree);\n    if (childs.length === 0) {\n        //leaves nodes\n        return \"U\";\n    } else {\n        var tempObj = [];\n        //intermediate nodes\n        for (var children = 0; children < childs.length; children++) {\n\n            let estado = get_labeled_tree(childs[children][3], tree, obj);\n            if (estado === \"U\") {\n                obj.push([childs[children], \"U\", '#33FF6B']);\n                tempObj.push([childs[children][3], \"U\"]);\n            } else {\n                obj.push([childs[children], \"D\", '#ff6666']);\n                tempObj.push([childs[children][3], \"D\"]);\n            }\n        }\n        var state = \"U\";\n\n        for (var count = 0; count < tempObj.length; count++) {\n            if (tempObj[count][1] === \"U\") {\n                state = \"D\";\n                break;\n            }\n        }\n        if (state === \"D\") {\n            return \"D\";\n        } else {\n            return \"U\";\n        }\n\n    }\n}\n\n\n// Function to build the global trees structure (intern)\nfunction build_trees_global(status) {\n    let trees, roots, lines, tempLines, obj, lit, estado = \"\";\n    for (const [, [, treesAndGuarantedd]] of Object.entries(Object.entries(status))) {\n        lit = Object.keys(treesAndGuarantedd)[0]; //The literal (the key for access to its tree)\n        trees = treesAndGuarantedd[lit].trees; //All trees associated with the literal\n        Array.isArray(trees[0]) ? roots = trees.filter(elem => elem.length === 2) : roots.push(trees);\n        //roots = trees.filter(elem => elem.length == 2); //All roots\n        //lines = trees.diff(roots); //All lines (whitout roots)\n        lines = trees.filter(x => !roots.indexOf(x) > -1);\n        tempLines = lines; //Temporal lines (this is for clean the set of all lines)\n        obj = [];\n        for (const [, [, root]] of Object.entries(Object.entries(roots))) {\n            if (root.length !== 0) {\n                estado = get_labeled_tree(root[1], tempLines, obj); // Return the state of the root\n                if (estado.localeCompare(\"U\") === 0){\n                    //Warrant argument\n                    delpSemantic.push(argumentsDung[utils.getFormatedArgumentBody(root[0])]);\n                } \n                treesGlobal[utils.getFormatedArgumentBody(root[0])] = {\n                    'id': root[1],\n                    'status': estado,\n                    'tree': obj\n                }\n            }\n            tempLines = tempLines.filter(x => !obj.indexOf(x) > -1);\n            obj = [];\n\n        }\n    }\n}\n\n// Return the dialectical tree of a particular argument\nfunction get_dialectical_tree(root) {\n    let nodes = [];\n    let edges = [];\n    let color, typeDefeat, conclusion;\n\n    if (treesGlobal[root].status === \"U\") {\n        color = '#33FF6B';\n    } else {\n        color = '#ff6666';\n    }\n\n    conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(root));\n    //Add the root of the tree\n    nodes.push({\n        'id': treesGlobal[root].id,\n        'label': conclusion.label,\n        'title': root,\n        'shape': 'triangle',\n        'size': 40,\n        'font': {\n            vadjust: -130,\n            size: 28,\n            color: 'black'\n        },\n        'color': color\n    });\n\n    let lines = treesGlobal[root].tree;\n    for (let count = 0; count < lines.length; count++) {\n        if (!utils.valueExistsinObjectArray(nodes, lines[count][0][3])) {\n            conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(lines[count][0][1]));\n            nodes.push({\n                'id': lines[count][0][3],\n                'label': conclusion.label,\n                'title': utils.getFormatedArgumentBody(lines[count][0][1]),\n                'shape': 'triangle',\n                'color': lines[count][2],\n                'size': 40,\n                'font': {\n                    vadjust: -130,\n                    size: 28,\n                    color: 'black'\n                }\n\n            });\n        }\n        typeDefeat = get_type_defeat(lines[count][0][0], lines[count][0][1]);\n        edges.push({\n            from: lines[count][0][2],\n            to: lines[count][0][3],\n            width: 3,\n            'dashes': typeDefeat\n        });\n    }\n\n    return {\n        'nodes': nodes,\n        'edges': edges\n    };\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the tree graphs\nexport function generate_tree_graph_structures(jsonCoreResponseStatus) {\n    //console.log(\"Parsing DeLP Core response (Trees)...\");\n    treesGlobal = {};\n    trees = {};\n    // Build global trees structure\n    build_trees_global(jsonCoreResponseStatus);\n\n    // Build the structures to graph the dialectical trees\n    for (const [root,] of Object.entries(treesGlobal)) {\n        trees[root] = get_dialectical_tree(root);\n    }\n\n    let labeledArguments = []\n    argumentsObject.map(argument => {\n        argument.color = trees[argument.id].nodes[0].color;\n        labeledArguments.push(argument)\n    });\n    return [trees, labeledArguments, delpSemantic];\n}\n\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport {Col, Form} from 'react-bootstrap';\n\n\nconst URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst axios = require('axios');\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\",\n  height: '53vh'\n}\n\nconst paramsForRandomProgramGen2 = {\n    \"nPosLiterals\" : 10,\n    \"nNegLiterals\" : 5,\n    \"maxStrictLiterals\" : 5,\n    \"nestingLevel\": 3,\n    \"bodyLength\" : 3,\n    \"headPerLiteral\" : 4,\n    \"properDefeatProb\" : 0.5\n}\n\nconst paramsForRandomProgramGen1 = {\n    \"nPrograms\" : 1, //Number of program to generate\n    \"nLiterals\" : 20, //Max number of literals\n    \"nNegLiterals\" : 15, //Max number of negative literals\n    \"nFacts\" : 7, //Max number of facts\n    \"minNDifHeads\" : 4, //Min number of differente heads\n    \"maxNDifHeads\" : 6, //Max number of differente heads,\n    \"minNDifRules\" : 5, //Min number of rules\n    \"maxNDifRules\" : 6, //Max number of rules,\n    \"maxNStrictsRules\" : 5, //Max number of strict rules\n    \"minNRulesInBody\" : 4, //Min number of literals in bodies\n    \"maxNRulesInBody\" : 4, //Max number of literals in bodies\n    \"maxAssocLevel\" : 3 //Association Level\n}\n\nclass Generator2Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    \n    this.inputPosLit = React.createRef();\n    this.inputNegLit = React.createRef();\n    this.inputMaxSRules = React.createRef();\n    this.inputNestingLevel = React.createRef();\n    this.inputBodyLentgh = React.createRef();\n    this.inputHeads = React.createRef();\n    //this.inputPropDefProb = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPosLiterals\": parseInt(this.inputPosLit.current.value),\n        \"nNegLiterals\": parseInt(this.inputNegLit.current.value),\n        \"maxStrictLiterals\": parseInt(this.inputMaxSRules.current.value),\n        \"nestingLevel\": parseInt(this.inputNestingLevel.current.value),\n        \"bodyLength\": parseInt(this.inputBodyLentgh.current.value),\n        \"headPerLiteral\": parseInt(this.inputHeads.current.value),\n        \"properDefeatProb\": 0.5\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    console.log(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp2');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render() {\n    return (\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n\n                <Form.Label>Literals:</Form.Label>\n                <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputPosLit} min=\"1\" step=\"1\" />\n\n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n                <Form.Label>~Literals:</Form.Label>\n                <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputNegLit} min=\"1\" step=\"1\" />\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number of strict rules\" ref={this.inputMaxSRules} min=\"1\" step=\"1\" />\n            <Form.Label>Nesting Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputNestingLevel} min=\"1\" step=\"1\" />\n            <Form.Label>Bodies:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputBodyLentgh} min=\"1\" step=\"1\" />\n            <Form.Label>Heads:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Association level\" ref={this.inputHeads} min=\"1\" step=\"1\" />\n\n          </Form.Group>\n\n          <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)} />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} sm={4}>\n            <Button variant=\"primary\" onClick={() => this.generateClick(this.getParams())}>\n              Generate\n            </Button>\n            <Button variant=\"primary\" onClick={() => this.generateClick(paramsForRandomProgramGen2)}>\n              Random\n            </Button>\n          </Form.Group>\n          <Form.Group as={Col} sm={8}>\n            <Button variant=\"primary\" style={{ float: \"right\" }} onClick={this.returnProgram}>\n              Ok\n            </Button>\n          </Form.Group>\n        </Form.Row>\n      </Form>\n    )\n  }\n}\n\n/* class Generator1Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    this.inputLit = React.createRef();\n    this.inputNLit = React.createRef();\n    this.inputFacts = React.createRef();\n    this.inputMinHeads = React.createRef();\n    this.inputMaxHeads = React.createRef();\n    this.inputMinRules = React.createRef();\n    this.inputMaxRules = React.createRef();\n    this.inputSRules = React.createRef();\n    this.inputMinBodyLiterals = React.createRef();\n    this.inputMaxBodyLiterals = React.createRef();\n    this.inputAssocLevel = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPrograms\": 1, //Number of program to generate\n        \"nLiterals\": parseInt(this.inputLit.current.value), //Max number of literals\n        \"nNegLiterals\": parseInt(this.inputNLit.current.value), //Max number of negative literals\n        \"nFacts\": parseInt(this.inputFacts.current.value), //Max number of facts\n        \"minNDifHeads\": parseInt(this.inputMinHeads.current.value), //Min number of differente heads\n        \"maxNDifHeads\": parseInt(this.inputMaxHeads.current.value), //Max number of differente heads,\n        \"minNDifRules\": parseInt(this.inputMinRules.current.value), //Min number of rules\n        \"maxNDifRules\": parseInt(this.inputMaxRules.current.value), //Max number of rules,\n        \"maxNStrictsRules\": parseInt(this.inputSRules.current.value), //Max number of strict rules\n        \"minNRulesInBody\": parseInt(this.inputMinBodyLiterals.current.value), //Min number of literals in bodies\n        \"maxNRulesInBody\": parseInt(this.inputMaxBodyLiterals.current.value), //Max number of literals in bodies\n        \"maxAssocLevel\": parseInt(this.inputAssocLevel.current.value) //Association Level\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp1');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/[\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render(){\n    return(\n        <Form>\n        <Form.Row>\n            <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n              <Form.Label>Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputLit} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              <Form.Label>~Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number\" ref={this.inputNLit} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Facts:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of facts\" ref={this.inputFacts} min=\"1\" step=\"1\"/>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of strict rules\" ref={this.inputSRules} min=\"1\" step=\"1\"/>\n            <Form.Label>Association Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputAssocLevel} min=\"1\" step=\"1\"/>\n            \n            <Form.Label>Different Heads:</Form.Label>\n            \n            <Form.Row>\n            \n            <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            <Form.Group as={Col} sm={6}>\n            \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            </Form.Row>\n            <Form.Label>Rules:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min  \" ref={this.inputMinRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Body Literals:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max\" ref={this.inputMaxBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n            </Form.Row>\n            \n            </Form.Group>\n            \n            <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" rows=\"23\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)}/>\n            </Form.Group>\n        </Form.Row>\n        <Form.Row>\n        <Form.Group as={Col} sm={4}>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(this.getParams())}>\n            Generate\n        </Button>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(paramsForRandomProgramGen1)}>\n            Random\n        </Button>\n        </Form.Group>\n        <Form.Group as={Col} sm={8}>\n        <Button variant=\"primary\" style={{float:\"right\"}} onClick={this.returnProgram}>\n            Ok\n        </Button>\n        </Form.Group>\n        </Form.Row>\n        </Form>\n    )\n  }\n} */\n\nfunction GeneratorsModal(props){\n      const [key, setKey] = useState('gen1');\n\n      function handleGenProg(program){\n        props.returnedProgram(program);\n        props.onHide();\n        \n      }\n\n      return (\n        <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={props.show} onHide={props.onHide} centered style={{height: '95vh'}}>\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              DeLP Programs Generators\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            {/* <Tabs\n              id=\"controlled-tab-example\"\n              activeKey={key}\n              onSelect={(k) => setKey(k)}\n            >\n              <Tab eventKey=\"gen1\" title=\"Generator 1\">\n                <Generator1Form program={handleGenProg}/>\n              </Tab> */}\n              {/* <Tab eventKey=\"gen2\" title=\"Generator 2\"> */}\n                <Generator2Form program={handleGenProg}/>\n              {/* </Tab>\n            </Tabs> */}\n          </Modal.Body>\n          {/* <Modal.Footer>\n            <Button onClick={props.onHide}>Close</Button>\n          </Modal.Footer> */}\n        </Modal>\n      )\n  }\n  \n  function Generators(props) {\n    const [modalShow, setModalShow] = React.useState(false);\n    \n    function generatedProgram(program){\n      props.showGeneratedProgram(program);\n    }\n    \n    return (\n      <>\n        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"sm\" onClick={() => setModalShow(true)} blocked>\n          Generators (experimental)\n        </Button>\n  \n        <GeneratorsModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          returnedProgram={generatedProgram}\n        />\n      </>\n    );\n  }\n\nexport default Generators;","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport {Button, FormGroup} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass Views extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleChangeViews = this.handleChangeViews.bind(this);\n        this.subArgumentRel = React.createRef();\n        this.typesDefeats = React.createRef();\n        this.attackTypeInternal = React.createRef();\n        this.attackTypeConclusion = React.createRef();\n        this.statusArguments = React.createRef();\n\n    }\n\n    handleChangeViews(){\n        let settingViews = {\n            optionSubArgumentRelation: this.subArgumentRel.current.checked,\n            optionTypeDefeater: this.typesDefeats.current.checked,\n            optionsAttacksPointsInternal: this.attackTypeInternal.current.checked,\n            optionsAttackPointsConclusion: this.attackTypeConclusion.current.checked,\n            optionStatusArguments: this.statusArguments.current.checked\n        };\n\n        this.props.handleViewsChange(settingViews);\n\n    }\n\n    render() {\n        return (\n            <div style={{position: 'absolute',zIndex:999}}>\n            <Accordion defaultActiveKey=\"1\">\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" style={{paddingTop:'0px',\n                        backgroundColor:'#7c7c7c', color:'white', paddingBottom:'0px'}}>\n                        Views\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <FormGroup>\n                            {/* <label style={{color:'#337ab7', fontSize:'20px'}}>-- Views</label> */}\n                            <Form onChange={this.handleChangeViews}>\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref={this.subArgumentRel}\n                                    label='Subargument relation'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.typesDefeats}\n                                    label='Types of defeat (proper or blocking)'\n                                />\n                                <label>Attack type:</label>\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeInternal}\n                                            label='Internal'\n                                />\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeConclusion}\n                                            label='Conclusion'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.statusArguments}\n                                    label='Status of the arguments'\n                                />\n                            </Form>\n                            </FormGroup>\n                            {/* <FormGroup>\n                                <label style={{color:'#337ab7', fontSize:'20px'}}>-- DeLP Graph</label>\n                                <Row>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Info</Button>\n                                    </Col>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Print</Button>\n                                    </Col>\n\n                                </Row>\n                            </FormGroup> */}\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n            </Accordion>\n            </div>\n        );\n    }\n}\n\nexport default Views;","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nimport Views from \"./views\";\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDeLPGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.selectedArgument = '';\n        this.myDeLPGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.dGraphNetworkEvents = this.dGraphNetworkEvents.bind(this);\n        this.notifyArgumentSelected = this.notifyArgumentSelected.bind(this);\n        this.defineView = this.defineView.bind(this);\n        this.network = {};\n        this.handleModalChange = this.handleModalChange.bind(this);\n    }\n\n    handleModalChange(value, msg){\n        this.props.handleModalChange(value, msg);\n      }\n\n    defineView(viewsSetting){\n        let adaptedDefeatsObject = JSON.parse(JSON.stringify(this.props.delpGraph.defeatsObject));\n        let adaptedArgumentsObject = JSON.parse(JSON.stringify(this.props.delpGraph.argumentsObject));\n\n        if ((viewsSetting.optionsAttacksPointsInternal || viewsSetting.optionsAttackPointsConclusion) &&\n            !(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n            if (viewsSetting.optionsAttacksPointsInternal) {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === 'I');\n            } else {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === \"C\");\n            }\n        } else {\n            if (!(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n\n                adaptedDefeatsObject.forEach(function (element) { delete element.label });\n\n            }\n\n        }\n\n        if (!viewsSetting.optionTypeDefeater) {\n            adaptedDefeatsObject.forEach(function (element) { delete element.dashes });\n            adaptedDefeatsObject.forEach(function (element) {\n                element.color = {\n                    color: '#97C2FC',\n                    highlight: '#97C2FC',\n                    hover: '#97C2FC'\n                };\n            });\n        }\n\n        let subsArg = [];\n        if (viewsSetting.optionSubArgumentRelation) {\n            subsArg = this.props.delpGraph.subArgumentsObject;\n        }\n\n        if(!viewsSetting.optionStatusArguments){\n            adaptedArgumentsObject.forEach(function (element) {\n                delete element.color\n            });\n        }\n\n        let newDefeatsObject = {\n            argumentsObject: adaptedArgumentsObject,\n            defeatsObject: adaptedDefeatsObject,\n            subArgumentsObject: subsArg\n        };\n\n        this.updateNetwork(newDefeatsObject);\n    }\n\n    notifyArgumentSelected(){\n        this.props.handleNotifyArgumentSelected(this.selectedArgument);\n    }\n\n    dGraphNetworkEvents(){\n        let self = this;\n        //Here define the associadted events with the network\n        this.network.on(\"click\", function (params) {\n            let selectedArgument = params.nodes[0];\n            if(selectedArgument){\n                self.selectedArgument = selectedArgument;\n                self.notifyArgumentSelected();\n            }\n        });\n        this.network.on(\"stabilizationIterationsDone\", function (params) {\n            self.handleModalChange(false, '');\n        });\n    }\n\n    componentDidMount(){\n        this.network = new Network(this.myDeLPGraphNetwork.current, data, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.dGraphNetworkEvents();\n    }\n\n    updateNetwork(newData){\n        //console.log(\"Updating network...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.argumentsObject, edges:newData.defeatsObject.concat(newData.subArgumentsObject)});\n\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.delpGraph !== prevProps.delpGraph){\n            this.updateNetwork(this.props.delpGraph);\n        }\n    }\n\n    render(){\n        return(\n            <div style={{}}>\n            <div style={{backgroundColor:'LightGray'}}>\n            DeLP Graph\n            <Views handleViewsChange = {this.defineView}/>\n            </div>\n                <div ref={this.myDeLPGraphNetwork} style={{height: \"86vh\"}}/>\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDeLPGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n\n// Options for Trees Network\nvar options = {\n    edges: {\n        smooth: true,\n        arrowStrikethrough: false,\n        arrows: { from: true }\n    },\n    layout: {\n        randomSeed: 2,\n        hierarchical: {\n            sortMethod: 'directed'\n        }\n    },\n    physics: {\n        enabled: false\n    }\n};\n\n\n\nclass VisLibTrees extends React.Component {\n    constructor(props) {\n        super(props);\n        this.network = {};\n        this.myTreeNetwork = React.createRef();\n        this.updateTree = this.updateTree.bind(this);\n    }\n\n    componentDidMount() {\n        this.network = new Network(this.myTreeNetwork.current, data, options);\n    }\n\n    updateTree(tree) {\n        nodes = tree.nodes;\n        edges = tree.edges;\n\n        this.network.setData({ nodes: nodes, edges: edges });\n\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedArgument !== prevProps.selectedArgument) {\n            this.updateTree(this.props.selectedArgument);\n        }\n\n    }\n\n    render() {\n        return (\n            <div style={{}}>\n                <div style={{backgroundColor:'LightGray'}}>\n                Dialectical Tree\n                </div>\n                <div ref={this.myTreeNetwork} style={{ height: \"86vh\" }} />\n            </div>\n        )\n    }\n}\n\nexport default VisLibTrees;","import React from \"react\";\nimport { examplePrograms } from './examplePrograms';\nimport { generate_graph_structures, generate_tree_graph_structures } from \"./DataParsing\";\nimport Generators from './generators/generators';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport VisNetworkDeLPGraph from './visLibDeLPGraph'\nimport VisLibTrees from \"./visLibTrees\";\nimport Spinner from 'react-bootstrap/Spinner'\n\n//const URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst URLtoCore = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/bridge.php';\n\nconst axios = require('axios');\n\nconst containersStyleTEST = {\n  marginTop: \"10px\",\n  width: \"100%\"\n}\n\n\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\",\n  height: \"70vh\",\n  marginTop: \"5px\"\n}\n\nclass ModalDeLP extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps){\n    const visible = this.props.modalInfo.visible;\n    const msg = this.props.modalInfo.msg;\n    if (visible !== prevProps.modalInfo.visible){\n      this.setState({modalInfo: {visible: visible, msg: msg}})\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <Modal\n      show={this.state.modalInfo['visible']}\n      size=\"sm\"\n      centered\n    >\n      <Modal.Header>\n      </Modal.Header>\n      <Modal.Body>\n        <p className=\"text-center\">\n        {this.state.modalInfo['msg']}\n        <Spinner animation=\"grow\" size='sm' variant=\"primary\"/>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n      </Modal.Footer>\n    </Modal>\n      </>\n    );\n  }\n}\n\n\nclass ExamplePrograms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedProgram: \"2\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  componentDidMount() {\n    this.setState({\n      selectedProgram: examplePrograms[\"2\"]\n    });\n    this.props.handleTextChange(examplePrograms[\"2\"]);\n  }\n\n  handleChange(event, program) {\n    this.setState({\n      selectedProgram: event.target.value\n    });\n    this.props.handleTextChange(program);\n  };\n\n  createSelectItems() {\n    let items = [];\n    items.push(<option key={-1} value=\"Write your program or select one of the examples.\">Select an example</option>);\n    for (var key in examplePrograms) {\n      items.push(<option key={key} value={examplePrograms[key]}>Example {key}</option>);\n    }\n    return items\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state.selectedProgram}\n        onChange={(e) => this.handleChange(e, e.target.value)}\n        ref={this.refExample}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\n/* function SelectPreferenceCriterion() {\n  return (\n    <Container>\n      <Row>\n        <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"sm\" block>\n          Pref. Criterion\n        </Button>\n      </Row>\n    </Container>\n  )\n} */\n\nclass AnalyzeProgramButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  setResponse(response) {\n    this.props.handleResponse(response);\n  }\n\n  handleModalChange(value, msg){\n    this.props.handleModalChange(value, msg);\n  }\n\n  componentDidMount() {\n    this.AnalyzeButtonRef.current.click();\n  }\n\n  parseProgram(program){\n    let newProgram = ''\n    const rules = program.split(/\\r?\\n/);\n    for (const rule of rules){\n      if(!(rule.includes('<-') || rule.includes('-<'))){\n        if(!rule.includes('use_criterion') && rule !== ''){\n          newProgram = newProgram + rule.replace('.','<- true.') + '\\n';\n        }else{\n          newProgram = newProgram + rule + '\\n';\n        }\n      }\n      else{\n        newProgram = newProgram + rule + '\\n';\n      }\n    }\n    return newProgram;\n  }\n\n  handleOnClick() {\n    let self = this;\n    this.handleModalChange(true, 'Analyzaing program...');\n    let delpProgram = this.props.program;\n    let parserProgram = self.parseProgram(delpProgram);\n    let formData = new FormData();\n    formData.append('delp', parserProgram);\n    formData.append('version', '2018');\n    formData.append('action', 'makeDelp');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n      .then(function (response) {\n        //console.log(\"Core Response: \", response.data);\n        self.setResponse(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Analyze DeLP\n      </Button>\n    )\n  }\n}\n\nclass ProgramMenu extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleLoadClick = this.handleLoadClick.bind(this);\n    this.refInput = React.createRef();\n  };\n  \n  handleChange(optionValue) {\n    this.props.handleTextChange(optionValue)\n  };\n\n  handleLoadClick(){\n    this.refInput.current.click();\n  }\n\n  handleInputChange(programName){\n    let self = this;\n    console.log(programName);\n    if (programName) {\n        var reader = new FileReader();\n        reader.readAsText(programName, 'utf-8');\n        reader.onload = function (evt) {\n            let program = evt.target.result;\n            self.props.handleTextChange(program)\n        }\n        reader.onerror = function (evt) {\n            alert(\"error reading file\");\n        }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col md=\"6\"><ExamplePrograms handleTextChange={this.handleChange} /></Col>\n          <Col md=\"6\">\n            <input \n              type=\"file\"\n              accept=\".delp\"\n              className=\"d-none\"\n              ref={this.refInput}\n              onChange={(e)=>this.handleInputChange(e.target.files[0])}/>\n              <Button \n                style={{ backgroundColor: '#337ab7', border: '0px', width:'100%'}} \n                size=\"sm\"\n                onClick={this.handleLoadClick}>Load</Button>\n          </Col>\n        </Row>\n        <Row style={{ marginTop: \"3px\" }}>\n          {/* <Col md=\"12\"><Generators showGeneratedProgram={this.handleChange} /></Col> */}\n          {/* <Col md=\"6\"><SelectPreferenceCriterion /></Col> */}\n        </Row>\n      </div>\n    )\n  }\n}\n\nclass TextAreaProgram extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.handleTextChange(e.target.value)\n  }\n\n  render() {\n    return (\n      <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Control as=\"textarea\" style={textAreaProgramStyle} spellCheck=\"false\" value={this.props.value} onChange={this.handleChange} />\n      </Form.Group>\n    )\n  }\n}\n\nclass AppDeLP extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log(\"DeLP Component created...\");\n    this.state = {\n      delpProgram: examplePrograms[\"2\"],\n      coreResponse: '',\n      dGraph: '',\n      trees: '',\n      selectedArgument: '',\n      delpSemantic: '',\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n    this.handleProgramChange = this.handleProgramChange.bind(this);\n    this.handleResponse = this.handleResponse.bind(this);\n    this.handleSelectedArgument = this.handleSelectedArgument.bind(this);\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  handleModalChange(value, msg){\n    this.setState({modalInfo:{\n      visible: value,\n      msg: msg\n    }});\n  }\n\n  handleProgramChange(value) {\n    this.setState({ delpProgram: value });\n  }\n\n  handleResponse(coreResponse) {\n    let structures;\n    let trees;\n    try{\n      structures = generate_graph_structures(coreResponse.dGraph);\n      trees = generate_tree_graph_structures(coreResponse.status);\n    } catch(error){\n      this.handleModalChange(true, 'Program error... Abort.');\n      throw new Error(\"Something went badly wrong!\");\n    }\n    this.setState({\n      coreResponse: coreResponse,\n      dGraph: {\n        argumentsObject: trees[1],\n        defeatsObject: structures.defeatsObject,\n        defeatsObjectDung: structures.defeatsObjectDung,\n        subArgumentsObject: structures.subArgumentsObject\n      },\n      trees: trees[0],\n      selectedArgument: Object.keys(trees[0])[0],\n      delpSemantic: trees[2]\n    });\n    this.props.handleGlobalResponseChange({\n      argumentsObjectDung: structures.argumentsObjectDung,\n      defeatsObjectDung: structures.defeatsObjectDung,\n      argumentsDung: structures.argumentsDung,\n      attacksDung: structures.attacksDung,\n      delpSemantic: trees[2]\n    });\n  }\n\n  handleSelectedArgument(selectedArgument) {\n    if (selectedArgument !== this.state.selectedArgument) {\n      console.log(\"Selected argument: \", selectedArgument);\n      this.setState({\n        selectedArgument: selectedArgument\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row style={{height: \"95vh\"}}>\n          <Col lg=\"3\" style={containersStyleTEST}>\n            <label>Program</label>\n            <ProgramMenu handleTextChange={this.handleProgramChange} />\n            <TextAreaProgram value={this.state.delpProgram}\n              handleTextChange={this.handleProgramChange} />\n            <AnalyzeProgramButton program={this.state.delpProgram}\n              handleResponse={this.handleResponse} \n              handleModalChange={this.handleModalChange}/>\n            <ModalDeLP modalInfo={this.state.modalInfo}/>  \n          </Col>\n          <Col lg=\"5\" style={containersStyleTEST}>\n            <VisNetworkDeLPGraph delpGraph={this.state.dGraph}\n              handleNotifyArgumentSelected={this.handleSelectedArgument} \n              handleModalChange={this.handleModalChange}/>\n          </Col>\n          <Col lg=\"4\" style={containersStyleTEST}>\n            <VisLibTrees selectedArgument={this.state.trees[this.state.selectedArgument]}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDeLP;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDungGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n    }\n\n    \n    componentDidMount(){\n        this.network = new Network(this.myDungGraphNetwork.current, {nodes:this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs}, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.fit();\n    }\n\n    updateNetwork(newData){\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.nodes, edges:newData.arcs});\n        console.log(\"Dung Graph updated...\");\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.dungGraph !== prevProps.dungGraph){\n            this.updateNetwork(this.props.dungGraph);\n        }\n    }\n\n    render(){\n        return(\n            <div style={{}}>\n                <div style={{backgroundColor:'LightGray'}}>Dung Graph</div>\n                <div ref={this.myDungGraphNetwork} style={{height: \"84vh\"}}/>\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\nfunction TitleExtension(props){\n    const extension = props['extensionData']['extension'];\n    //const extensionIndex = props['extensionData']['id'];\n    if (extension.lenght === 0){\n        return 'Extensions not comp'\n    }else{\n        return 'Extension'\n    }\n}\n\nclass VisNetworkDungGraphExtensions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n        this.handleModalChange = this.handleModalChange.bind(this);\n    }\n\n    handleModalChange(value, msg){\n        this.props.handleModalChange(value, msg);\n    }\n\n    dungGraphNetworkEvents(){\n        //let self = this;\n        //Here define the associadted events with the network\n        this.network.on(\"click\", function (params) {\n            let selectedArgument = params.nodes[0];\n            if(selectedArgument){\n                // To notify when an argument is selected on network\n                //self.selectedArgument = selectedArgument;\n                //self.notifyArgumentSelected();\n            }\n        });\n        this.network.on(\"stabilizationIterationsDone\", function (params) {\n            //console.log(\"Finish Dung draw\");\n        });\n    }\n\n    componentDidMount() {\n        //console.log(\"Drawing Dung Graph...\");\n        this.network = new Network(this.myDungGraphNetwork.current, { nodes: this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs }, options);\n        this.updateNetworkExtension(this.props.extension);\n        this.dungGraphNetworkEvents();\n\n    }\n\n    updateNetwork(newData) {\n        console.log(\"Updating Dung Graph...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({ nodes: newData.nodes, edges: newData.arcs });\n    }\n\n    updateNetworkExtension(extension) {\n        console.log(\"Draw extensions change\", typeof extension['extension']);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        let nodes = this.props.dungGraph.nodes;\n        if (extension['extension'].length === 0) {\n            for (const node of nodes){\n                this.network.body.data.nodes.update([{\n                    id: node['id'],\n                    color: '#97C2FC'\n                }]);\n            }\n            /* nodes.map(node => {\n                this.network.body.data.nodes.update([{\n                    id: node['id'],\n                    color: '#97C2FC'\n                }]);\n            }) */\n        } else {\n            for (const node of nodes){\n                if (extension['extension'].includes(node['id'])) {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#33FF6B'\n                    }]);\n                } else {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#ff6666'\n                    }]);\n                }\n            }\n            /* nodes.map(node => {\n                if (extension['extension'].includes(node['id'])) {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#33FF6B'\n                    }]);\n                } else {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#ff6666'\n                    }]);\n                }\n            }) */\n        }\n        this.handleModalChange(false, '');\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dungGraph !== prevProps.dungGraph) {\n            this.updateNetwork(this.props.dungGraph);\n        }\n        if (this.props.extension !== prevProps.extension) {\n            this.updateNetworkExtension(this.props.extension);\n        }\n    }\n\n    render() {\n        return (\n            <div style={{}}>\n                <div style={{backgroundColor:'LightGray'}}>\n                <TitleExtension extensionData={this.props.extension}/>\n                </div>\n                <div ref={this.myDungGraphNetwork} style={{ height: \"84vh\" }} />\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraphExtensions;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport VisNetworkDungGraph from './visLibDungGraph'\nimport VisNetworkDungGraphExtensions from './visLibDungGraphExtensions'\nimport Modal from 'react-bootstrap/Modal'\nimport Spinner from 'react-bootstrap/Spinner'\n\n//const URLtoDungSolvers = 'http://localhost/daqapClient/bridge/callSolver.php';\nconst URLtoDungSolvers = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/callSolver.php';\n\nconst axios = require('axios');\n\nconst containersStyleTESTDung = {\n  marginTop: \"5px\",\n  width: \"100%\"\n}\n\nclass ModalDung extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      modalInfo:{\n        visible: false,\n        msg:''\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps){\n    const visible = this.props.modalInfo.visible;\n    const msg = this.props.modalInfo.msg;\n    if (visible !== prevProps.modalInfo.visible){\n      this.setState({modalInfo: {visible: visible, msg: msg}})\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <Modal\n      show={this.state.modalInfo['visible']}\n      size=\"sm\"\n      centered\n    >\n      <Modal.Header>\n      </Modal.Header>\n      <Modal.Body>\n        <p className=\"text-center\">\n        {this.state.modalInfo['msg']}\n        <Spinner animation=\"grow\" size='sm' variant=\"primary\"/>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n      </Modal.Footer>\n    </Modal>\n      </>\n    );\n  }\n}\n\nclass QuerySemantic extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  handleModalChange(value, msg){\n    this.props.handleModalChange(value, msg);\n  }\n\n  setResponse(response) {\n    this.props.handleSemanticCompute(response);\n  }\n\n  handleOnClick() {\n    let self = this;\n    const semantic = this.props.selectedSemantic;\n    const semExtensions = this.props.semantics[semantic];\n    if (semExtensions.length === 0) {\n      self.handleModalChange(true, 'Consulting semantics to ' + this.props.selectedSolver);\n      let formData = new FormData();\n      for (var i = 0; i < this.props.args.length; i++) {\n        formData.append('arguments[]', this.props.args[i]);\n      }\n      for (var j = 0; j < this.props.attacks.length; j++) {\n        formData.append('attacks[]', this.props.attacks[j]);\n      }\n      formData.append('semantics', this.props.selectedSemantic);\n      formData.append('solver', this.props.selectedSolver);\n      formData.append('action', 'solver');\n      //Show a loader?\n      axios.post(URLtoDungSolvers, formData)\n        .then(function (response) {\n          console.log(\"Solver Response: \", response['data']);\n          let extensions = response['data'][semantic];\n          if (Array.isArray(extensions[0])) {\n            let toNumberFormat = extensions.map((extension) => {\n              return extension.map(Number);\n            });\n            self.setResponse(toNumberFormat);\n          } else {\n            let toNumberFormat = extensions.map(Number);\n            self.setResponse([toNumberFormat]);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } else {\n      console.log(\"Semantics already computed: \", this.props.selectedSemantic);\n    }\n\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' , marginTop:'28px'}} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Query\n      </Button>\n    )\n  }\n}\n\nclass SelectExtension extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n    this.refExtension = React.createRef();\n  };\n\n  handleChange(extension) {\n    console.log(extension);\n    this.props.handleChangeExtension(extension);\n  };\n\n  componentDidUpdate(prevProps) {\n    const newExtensions = this.props.extensions;\n    if (prevProps['extensions'] !== newExtensions) {\n      if (newExtensions.length !== 0) {\n        this.handleChange(newExtensions[0]);\n      }else{\n        this.handleChange([]);\n      }\n    }\n  }\n\n  createSelectItems() {\n    let items = [];\n    let extensions = this.props.extensions;\n    if (extensions.length !== 0) {\n      for (var key in extensions) {\n        items.push(<option key={key} value={extensions[key]}>{String(key + ':  {' + extensions[key] + '}')}</option>);\n      }\n    } else {\n      items.push(<option key={-1} value={[]}>{String(\"Not computed\")}</option>);\n    }\n    return items;\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom\n        onChange={(e) =>{\n          const in_array = e.target.value.split(',').map(function(item) {\n            return parseInt(item, 10);\n          });\n          this.handleChange(in_array)}}\n        ref={this.refExtension}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSemantic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSemantic: \"delp\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  handleChange(semantic) {\n    this.setState({\n      selectedSemantic: semantic\n    });\n    this.props.handleChangeSemantic(semantic);\n  };\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state['selectedSemantic']}\n        onChange={(e) => this.handleChange(e.target.value)}\n        ref={this.refExample}>\n        <option key={1} value=\"delp\">DeLP</option>\n        <option key={2} value=\"grounded\">Grounded</option>\n        <option key={3} value=\"preferred\">Preferred</option>\n        <option key={4} value=\"stable\">Stable</option>\n        <option key={5} value=\"semistable\">Semistable</option>\n        {/* <option key={6} value=\"allSemantics\">All Semantics</option> */}\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSolver extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedSolver: 'ArgTech'\n    };\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ selectedSolver: newSolver });\n    this.props.handleChangeSolver(newSolver);\n  };\n\n  render() {\n    return (\n      <Form>\n        <label>Select solver:</label>\n        <div key={`solvers`} className=\"mb-3\" onChange={(e) => this.handleChangeSolver(e.target.id)}>\n          <Form.Check\n            inline\n            label=\"jArgSemSat\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`jArgSemSat`}\n            disabled\n          />\n          <Form.Check\n            inline\n            label=\"Arg-Tech\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`ArgTech`}\n            defaultChecked\n          />\n        </div>\n      </Form>\n    )\n  }\n}\n\nclass AppDung extends React.Component {\n  constructor(props) {\n    console.log(\"Dung Component created...\");\n    super(props);\n    this.state = {\n      'dungGraph': { 'nodes': this.props.dungGraph.argumentsObjectDung, 'arcs': this.props.dungGraph.defeatsObjectDung },\n      'solverData': { 'args': this.props.dungGraph.argumentsDung, 'attacks': this.props.dungGraph.attacksDung },\n      'selectedSemantic': 'delp',\n      'semantics': {\n        'delp': [this.props.dungGraph.delpSemantic],\n        'grounded': [],\n        'preferred': [],\n        'stable': [],\n        'semistable': []\n      },\n      'extension': {\n        'semantic': 'delp',\n        'extension': this.props.dungGraph.delpSemantic\n      },\n      'solver': 'ArgTech',\n      'modalInfo': {\n        visible: false,\n        msg: ''\n      }\n    };\n    this.handleChangeSemantic = this.handleChangeSemantic.bind(this);\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n    this.handleChangeExtension = this.handleChangeExtension.bind(this);\n    this.handleSemanticCompute = this.handleSemanticCompute.bind(this);\n    this.handleModalChange = this.handleModalChange.bind(this);\n  };\n\n  handleModalChange(value,msg){\n    this.setState({modalInfo: {\n      visible: value,\n      msg: msg\n    }});\n  }\n\n  handleChangeSemantic(newSemantic) {\n    this.setState({ 'selectedSemantic': newSemantic });\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ 'solver': newSolver });\n  }\n\n  handleChangeExtension(extension) {\n    const selectedSemantic = this.state['selectedSemantic'];\n    this.setState({ 'extension': { 'semantic': selectedSemantic, 'extension': extension } });\n    //console.log(\"Semantic: \" + selectedSemantic + ' Id: ' + extension['id'] + 'ext: ' + extension['extension']);\n  }\n\n  handleSemanticCompute(semanticExtensions) {\n    const selectedSemantic = this.state['selectedSemantic'];\n    var semantics = { ...this.state['semantics'] };\n    semantics[selectedSemantic] = semanticExtensions;\n    this.setState({ semantics });\n  }\n\n  componentDidUpdate(prevProps) {\n    const newDungGrapg = this.props.dungGraph.argumentsDung;\n    if (prevProps.dungGraph.argumentsDung !== newDungGrapg){\n      this.setState({\n        dungGraph: { 'nodes': this.props.dungGraph.argumentsObjectDung, 'arcs': this.props.dungGraph.defeatsObjectDung },\n        solverData: { 'args': this.props.dungGraph.argumentsDung, 'attacks': this.props.dungGraph.attacksDung },\n        'selectedSemantic': 'delp',\n        'semantics': {\n          'delp': [this.props.dungGraph.delpSemantic],\n          'grounded': [],\n          'preferred': [],\n          'stable': [],\n          'semistable': []\n        },\n        'extension': {\n          'semantic': 'delp',\n          'extension': this.props.dungGraph.delpSemantic\n        },\n        'solver': 'ArgTech',\n        'modalInfo': {\n          visible: false,\n          msg: ''\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid style={containersStyleTESTDung}>\n        <Row style={{}}>\n          <Col lg='2' >\n            <label>Select Semantic:</label>\n            <SelectSemantic handleChangeSemantic={this.handleChangeSemantic} />\n          </Col>\n          <Col lg='3'>\n            <SelectSolver handleChangeSolver={this.handleChangeSolver} />\n          </Col>\n          <Col lg='2'>\n            <QuerySemantic selectedSemantic={this.state['selectedSemantic']}\n              selectedSolver={this.state['solver']}\n              args={this.state['solverData']['args']}\n              attacks={this.state['solverData']['attacks']}\n              semantics={this.state['semantics']}\n              handleSemanticCompute={this.handleSemanticCompute} \n              handleModalChange = {this.handleModalChange}/>\n              <ModalDung modalInfo={this.state.modalInfo}/>\n          </Col>\n          <Col lg='4'>\n            <label>Select Extension:</label>\n            <SelectExtension extensions={this.state['semantics'][this.state['selectedSemantic']]}\n              handleChangeExtension={this.handleChangeExtension} />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"6\">\n            <VisNetworkDungGraph dungGraph={this.state['dungGraph']} />\n          </Col>\n          <Col lg=\"6\">\n            <VisNetworkDungGraphExtensions dungGraph={this.state['dungGraph']}\n              extension={this.state['extension']} handleModalChange={this.handleModalChange}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDung;\n","import React from 'react'\nimport Nav from 'react-bootstrap/Nav'\n//import { Container, Tabs, Tab, Row, Col } from 'react-bootstrap'\nimport AppDeLP from './delp/delp'\nimport AppDung from './dung/dung'\n\nclass DAQAP extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            argumentsObjectDung: '',\n            defeatsObjectDung: '',\n            argumentsDung: '',\n            attacksDung: '',\n            delpSemantic: ''\n        };\n        this.handleResponse = this.handleResponse.bind(this);\n    }\n\n    handleResponse(response) {\n        this.setState(response);\n    }\n\n    render() {\n        return (\n            <div>\n                <AppDeLP handleGlobalResponseChange={this.handleResponse} />\n                <AppDung dungGraph={this.state} />\n            </div>\n        );\n    }\n}\n\nexport default DAQAP;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport HomeComponent from './info/home'\nimport DAQAP from './daqap'\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n\tLink,\n\tNavLink\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Navbar expand=\"sm\" style={{ height: \"30px\", backgroundColor: '#337ab7' }}>\n\t\t\t\t\t<Navbar.Brand as={Link} to=\"/~daqap/index\" style={{ color: 'white', fontSize: '12px' }}>DAQAP (Release Candidate 0.1)</Navbar.Brand>\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/~daqap/index\" style={{ color: 'white' }}>Home</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/~daqap/daqap\" style={{ color: 'white' }}>Daqap</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/~daqap/index\">\n\t\t\t\t\t\t<HomeComponent />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/~daqap/daqap\">\n\t\t\t\t\t\t<DAQAP />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}