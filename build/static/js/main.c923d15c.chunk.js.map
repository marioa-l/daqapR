{"version":3,"sources":["delp/examplePrograms.js","delp/utilsDeLP.js","delp/DataParsing.js","delp/generators/generators.js","delp/views.js","delp/visLibDeLPGraph.js","delp/visLibTrees.js","delp/delp.js","dung/visLibDungGraph.js","dung/visLibDungGraphExtensions.js","dung/dung.js","App.js","serviceWorker.js","index.js"],"names":["examplePrograms","getFormatedArgumentBody","argument","replace","argumentsObject","argumentsObjectDung","subargumentsObject","defeatsObject","defeatsObjectDung","argumentsDung","attacksDung","delpSemantic","argIndex","load_arguments","args","map","id","Object","keys","push","utils","conclusion","color","size","vadjust","align","defeats","defeater","defeated","defeatType","arcLabel","arrows","to","enabled","type","highlight","hover","load_defeaters","subarguments","subargument","width","load_subarguments","trees","treesGlobal","get_labeled_tree","current","tree","obj","childs","parent","list","count","length","get_childs","tempObj","children","state","get_dialectical_tree","root","typeDefeat","nodes","edges","status","find","element","label","lines","arrayObject","value","defeat","from","dashes","generate_tree_graph_structures","jsonCoreResponseStatus","console","log","roots","tempLines","estado","entries","treesAndGuarantedd","Array","isArray","filter","elem","x","indexOf","localeCompare","build_trees_global","labeledArguments","URLtoCore","axios","require","textAreaProgramStyle","resize","fontFamily","fontSize","paramsForRandomProgramGen2","paramsForRandomProgramGen1","Generator2Form","props","program","generateClick","bind","handleGeneratedProgram","returnProgram","getParams","inputPosLit","React","createRef","inputNegLit","inputMaxSRules","inputNestingLevel","inputBodyLentgh","inputHeads","this","setState","parseInt","params","self","formData","FormData","JSON","stringify","append","post","then","response","data","catch","error","Form","Row","Group","as","Col","sm","controlId","Label","Control","placeholder","ref","min","step","spellcheck","rows","style","onChange","event","target","Button","variant","onClick","float","Component","Generator1Form","inputLit","inputNLit","inputFacts","inputMinHeads","inputMaxHeads","inputMinRules","inputMaxRules","inputSRules","inputMinBodyLiterals","inputMaxBodyLiterals","inputAssocLevel","GeneratorsModal","useState","key","setKey","handleGenProg","returnedProgram","onHide","Modal","aria-labelledby","show","centered","Header","closeButton","Title","Body","Tabs","activeKey","onSelect","k","Tab","eventKey","title","Generators","modalShow","setModalShow","backgroundColor","border","block","showGeneratedProgram","Views","handleChangeViews","subArgumentRel","typesDefeats","attackTypeInternal","attackTypeConclusion","statusArguments","settingViews","optionSubArgumentRelation","checked","optionTypeDefeater","optionsAttacksPointsInternal","optionsAttackPointsConclusion","optionStatusArguments","handleViewsChange","position","zIndex","Accordion","defaultActiveKey","Card","Toggle","paddingTop","paddingBottom","Collapse","FormGroup","Check","defaultChecked","marginLeft","DataSet","options","fixed","scaling","arrowStrikethrough","interaction","physics","solver","forceAtlas2Based","springConstant","centralGravity","avoidOverlap","layout","randomSeed","VisNetworkDeLPGraph","selectedArgument","myDeLPGraphNetwork","updateNetwork","dGraphNetworkEvents","notifyArgumentSelected","defineView","network","handleModalChange","msg","viewsSetting","adaptedDefeatsObject","parse","delpGraph","adaptedArgumentsObject","forEach","subsArg","subArgumentsObject","newDefeatsObject","handleNotifyArgumentSelected","on","Network","setOptions","newData","setData","concat","prevProps","height","smooth","hierarchical","sortMethod","VisLibTrees","myTreeNetwork","updateTree","containersStyleTEST","marginTop","ModalDeLP","modalInfo","visible","className","Spinner","animation","Footer","ExamplePrograms","selectedProgram","handleChange","refExample","handleTextChange","items","custom","e","createSelectItems","AnalyzeProgramButton","handleOnClick","setResponse","AnalyzeButtonRef","handleResponse","click","newProgram","split","rule","includes","delpProgram","parserProgram","parseProgram","ProgramMenu","optionValue","md","TextAreaProgram","spellCheck","AppDeLP","coreResponse","dGraph","handleProgramChange","handleSelectedArgument","structures","jsonCoreResponseDGraph","literal","attack","values","Error","handleGlobalResponseChange","Container","fluid","lg","VisNetworkDungGraph","myDungGraphNetwork","dungGraph","arcs","TitleExtension","semantic","extensionIndex","charAt","toUpperCase","slice","VisNetworkDungGraphExtensions","updateNetworkExtension","extension","node","body","update","extensionData","QuerySemantic","handleSemanticCompute","selectedSemantic","semantics","i","attacks","selectedSolver","extensions","toNumberFormat","Number","SelectExtension","selectedExtension","refExtension","handleChangeExtension","newExtensions","String","SelectSemantic","handleChangeSemantic","SelectSolver","handleChangeSolver","newSolver","inline","name","disabled","AppDung","newSemantic","semanticExtensions","App","Navbar","expand","Brand","Link","aria-controls","Nav","NavLink","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c923d15c.chunk.js","sourcesContent":["// This file contain the DeLP programs used as examples for the platform\nexport const examplePrograms = {\n    \"0\": \"use_criterion(more_specific).\\n\\n\" +\n        \"fly(X) -< bird(X).\\n\" +\n        \"bird(X) <- chicken(X).\\n\" +\n        \"bird(X) <- penguin(X).\\n\" +\n        \"bird(X) <- duck(X).\\n\" +\n        \"bird(X) <- rhea(X).\\n\" +\n        \"~fly(X) <- penguin(X).\\n\" +\n        \"~fly(X) -< chicken(X).\\n\" +\n        \"~fly(X) -< baby(X).\\n\" +\n        \"fly(X) -< chicken(X), scared(X).\\n\\n\" +\n\n        \"chicken(little).\\n\" +\n        \"chicken(koko).\\n\" +\n        \"scared(koko).\\n\" +\n        \"chicken(lily).\\n\" +\n        \"scared(lily).\\n\" +\n        \"penguin(chilly).\\n\" +\n        \"duck(tiny).\\n\" +\n        \"baby(tiny).\\n\" +\n        \"rhea(charito).\",\n\n    \"1\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"2\": \"use_criterion(more_specific).\\n\\n\" +\n        \"surf -< nice, spare_time.\\n\" +\n        \"nice -< waves.\\n\" +\n        \"~nice -< rain.\\n\" +\n        \"rain -< cloudy.\\n\" +\n        \"~rain -< dry_season.\\n\" +\n        \"spare_time -< ~busy.\\n\" +\n        \"~busy -< ~working.\\n\" +\n        \"cold -< winter.\\n\" +\n        \"working -< monday.\\n\" +\n        \"busy -< yard_work.\\n\" +\n        \"yard_work -< grass_grown.\\n\" +\n        \"~yard_work -< hire_gardener.\\n\" +\n        \"many_surfers -< waves.\\n\" +\n        \"~many_surfers -< monday.\\n\\n\" +\n\n        \"monday.\\n\" +\n        \"cloudy.\\n\" +\n        \"dry_season.\\n\" +\n        \"waves.\\n\" +\n        \"grass_grown.\\n\" +\n        \"hire_gardener.\\n\" +\n        \"vacation.\\n\" +\n        \"~working <- vacation.\\n\" +\n        \"few_surfers <- ~many_surfers.\\n\" +\n        \"~surf <- ill.\",\n\n    \"3\": \"use_criterion(more_specific).\\n\\n\" +\n        \"r -< s.\\n\" +\n        \"~h -< d,t.\\n\" +\n        \"s -< d.\\n\" +\n        \"~e -< ~h, ~a.\\n\" +\n        \"s -< h.\\n\" +\n        \"~i -< ~a, s.\\n\" +\n        \"h -< d.\\n\" +\n        \"h -< b.\\n\" +\n        \"a -< t.\\n\" +\n        \"~f -< ~e.\\n\\n\" +\n\n        \"~a.\\n\" +\n        \"t.\\n\" +\n        \"b.\\n\" +\n        \"d <- t.\",\n\n    \"4\": \"has_priority((a-<d,b,c),(~a-<b,c)).\\n\" +\n        \"has_priority((~a-<b,c),(a-<b)).\\n\\n\" +\n\n        \"use_criterion(rules_priorities).\\n\\n\" +\n\n        \"a-<b.\\n\" +\n        \"~a-<b,c.\\n\" +\n        \"a-<d,b,c.\\n\" +\n        \"h -< b.\\n\" +\n        \"~h -< d,b.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\",\n\n    \"5\": \"use_criterion(more_specific).\\n\\n\" +\n        \"a -< x.\\n\" +\n        \"a -< y.\\n\" +\n        \"~a -< x,y.\\n\" +\n        \"~a -< z.\\n\" +\n        \"a -< x,y,z.\\n\" +\n        \"~a -< w,z.\\n\" +\n        \"a -< w.\\n\\n\" +\n\n        \"x.\\n\" +\n        \"y.\\n\" +\n        \"z.\\n\" +\n        \"w.\",\n\n    \"6\": \"use_criterion(more_specific).\\n\" +\n\n        \"a-<b.\\n\\n\" +\n\n        \"~a-<b,c.\\n\" +\n        \"~a-<b,d.\\n\" +\n        \"~a-<b,e.\\n\\n\" +\n\n        \"a-<b,z,c.\\n\" +\n        \"a-<b,z,d.\\n\" +\n        \"a-<b,z,e.\\n\\n\" +\n\n        \"a-<b,c,d,e.\\n\\n\" +\n\n        \"b.\\n\" +\n        \"c.\\n\" +\n        \"d.\\n\" +\n        \"e.\\n\" +\n        \"z.\"\n\n    /* \"7\": \"use_criterion(more_specific).\\n\\n\" +\n\n        \"~culpable(X) -< not culpable(X).\\n\" +\n        \"~preso(X) <- inocente(X).\\n\" +\n        \"inocente(X) <- ~culpable(X).\\n\" +\n        \"preso(X) -< not culpable(X), alta-sospecha(X).\\n\" +\n        \"alta-sospecha(pepe) .\" */\n\n}\n","export function getFormatedArgumentBody(argument) {\n    return argument.replace(/-</g, \"⤙\").replace(/_G[0-9]+/g, \"X\").replace(/<-/g, \"⇽\");\n}\n\nexport function valueExistsinObjectArray(arrayObject, value) {\n    for (var count = 0; count < arrayObject.length; count++) {\n        if (arrayObject[count].id === value) {\n            return true;\n        }\n    }\n\n    return false;\n}","import * as utils from \"./utilsDeLP\";\n\n// Global structures\nlet argumentsObject = [];\nlet argumentsObjectDung = [];\nlet subargumentsObject = [];\nlet defeatsObject = [];\nlet defeatsObjectDung = [];\nlet argumentsDung = {}; //argument:id\nlet attacksDung = []; //Tuples of (from, to)\nlet delpSemantic = []; //Ids of warrant arguments\nlet argIndex = 0;\n\n// Build the Defeats object for the DeLP Graph\nfunction load_defeaters(defeater, defeated) {\n    let defeatType;\n    let arcLabel;\n    //To set the type of defeat (proper or blocking) Check this!\n    defeater['defeaterType'] === 'proper' ? defeatType = true : defeatType = false;\n\n    //To set the type of attack (conclusion or internal)\n    defeater['innerPoint'] === defeated.conclusion ? arcLabel = 'C' : arcLabel = 'I';\n\n    //Load the defeats object\n    defeatsObject.push({\n        'from': utils.getFormatedArgumentBody(defeater['defeat']),\n        'to': utils.getFormatedArgumentBody(defeated.id),\n        arrows: {\n            to: {\n                enabled: true,\n                type: 'arrow'\n            }\n        },\n        'color': {\n            color: '#d9534f',\n            highlight: 'red',\n            hover: 'red'\n        },\n        'width': 3,\n        'label': arcLabel,\n        'dashes': defeatType,\n        'font': {\n            color: 'black',\n            size: 18,\n            align: 'top'\n        }\n    });\n\n\n\n}\n\n// Build the SubArguments object for the DeLP Graph\nfunction load_subarguments(subargument, argument) {\n    if (subargument !== argument.id) {\n        subargumentsObject.push({\n            'from': utils.getFormatedArgumentBody(subargument),\n            'to': utils.getFormatedArgumentBody(argument.id),\n            arrows: {\n                to: {\n                    enabled: true,\n                    type: 'circle'\n                }\n            },\n            color: {\n                color: '#5bc0de',\n                highlight: '#5bc0de',\n                hover: '#5bc0de'\n            },\n            width: 3\n        });\n    }\n}\n\n// Build the Arguments Object for the DeLP Graph\nfunction load_arguments(args) {\n    args.map(argument => {\n        let id = Object.keys(argument)[0];\n        argumentsObject.push({\n            'id': utils.getFormatedArgumentBody(id),\n            'label': argument[id].conclusion + '\\n\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'triangle',\n            'size': '40'\n        });\n        argumentsObjectDung.push({\n            'id': argIndex,\n            'label': argument[id].conclusion + '\\n\\n' + argIndex,\n            'font': {\n                color: 'black',\n                size: 28,\n                vadjust: -130,\n                align: 'center'\n            },\n            'title': utils.getFormatedArgumentBody(argument[id].id),\n            'shape': 'dot',\n            'size': '40'\n        });\n        argumentsDung[utils.getFormatedArgumentBody(id)] = argIndex;\n        argument[id].defeats.map(defeater => load_defeaters(defeater, argument[id]));\n        argument[id].subarguments.map(subargument => load_subarguments(subargument, argument[id]));\n        argIndex = argIndex + 1;\n    });\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the DeLP Graph\nexport function generate_graph_structures(jsonCoreResponseDGraph) {\n    console.log(\"Parsing DeLP Core response (DGraph)...\")\n    argumentsObject = [];\n    argumentsObjectDung = [];\n    subargumentsObject = [];\n    defeatsObject = [];\n    defeatsObjectDung = [];\n    argumentsDung = {};\n    attacksDung = [];\n    delpSemantic = [];\n    argIndex = 0;\n\n    jsonCoreResponseDGraph.map(literal => {\n        let key = Object.keys(literal)[0];\n        load_arguments(literal[key]);\n    });\n    defeatsObject.map(attack => {\n        attacksDung.push('(' + argumentsDung[attack['from']] + ',' + argumentsDung[attack['to']] + ')');\n        defeatsObjectDung.push({ 'from': argumentsDung[attack['from']], 'to': argumentsDung[attack['to']], 'arrows': 'to', 'width': 3 })\n    });\n    return {\n        'argumentsObject': argumentsObject,\n        'argumentsObjectDung': argumentsObjectDung,\n        'subArgumentsObject': subargumentsObject,\n        'defeatsObject': defeatsObject,\n        'defeatsObjectDung': defeatsObjectDung,\n        'argumentsDung': Object.values(argumentsDung),\n        'attacksDung': attacksDung\n    };\n}\n\n/////////////////////\n// For tree graphs //\n/////////////////////\n\n// Global structures\nlet trees = {}\nlet treesGlobal = {}\n\n// To get the type of a defeat relation\nfunction get_type_defeat(argument, defeater) {\n    let typeDefeat = defeatsObject.find(defeat => defeat.from === utils.getFormatedArgumentBody(defeater) && defeat.to === utils.getFormatedArgumentBody(argument));\n    return typeDefeat.dashes;\n}\n\n// Returns all children of a parent in the tree structure\nfunction get_childs(parent, list) {\n    let childs = [];\n    for (var count = 0; count < list.length; count++) {\n        if (list[count][2] === parent) {\n            childs.push(list[count]);\n        }\n    }\n    return childs;\n}\n\n// Return the state of the root\nfunction get_labeled_tree(current, tree, obj) {\n    let childs = get_childs(current, tree);\n    if (childs.length === 0) {\n        //leaves nodes\n        return \"U\";\n    } else {\n        var tempObj = [];\n        //intermediate nodes\n        for (var children = 0; children < childs.length; children++) {\n\n            let estado = get_labeled_tree(childs[children][3], tree, obj);\n            if (estado === \"U\") {\n                obj.push([childs[children], \"U\", '#33FF6B']);\n                tempObj.push([childs[children][3], \"U\"]);\n            } else {\n                obj.push([childs[children], \"D\", '#ff6666']);\n                tempObj.push([childs[children][3], \"D\"]);\n            }\n        }\n        var state = \"U\";\n\n        for (var count = 0; count < tempObj.length; count++) {\n            if (tempObj[count][1] === \"U\") {\n                state = \"D\";\n                break;\n            }\n        }\n        if (state === \"D\") {\n            return \"D\";\n        } else {\n            return \"U\";\n        }\n\n    }\n}\n\n\n// Function to build the global trees structure (intern)\nfunction build_trees_global(status) {\n    let trees, roots, lines, tempLines, obj, lit, estado = \"\";\n    for (const [, [, treesAndGuarantedd]] of Object.entries(Object.entries(status))) {\n        lit = Object.keys(treesAndGuarantedd)[0]; //The literal (the key for access to its tree)\n        trees = treesAndGuarantedd[lit].trees; //All trees associated with the literal\n        Array.isArray(trees[0]) ? roots = trees.filter(elem => elem.length === 2) : roots.push(trees);\n        //roots = trees.filter(elem => elem.length == 2); //All roots\n        //lines = trees.diff(roots); //All lines (whitout roots)\n        lines = trees.filter(x => !roots.indexOf(x) > -1);\n        tempLines = lines; //Temporal lines (this is for clean the set of all lines)\n        obj = [];\n        for (const [, [, root]] of Object.entries(Object.entries(roots))) {\n            if (root.length !== 0) {\n                estado = get_labeled_tree(root[1], tempLines, obj); // Return the state of the root\n                if (estado.localeCompare(\"U\") == 0){\n                    //Warrant argument\n                    delpSemantic.push(argumentsDung[utils.getFormatedArgumentBody(root[0])]);\n                } \n                treesGlobal[utils.getFormatedArgumentBody(root[0])] = {\n                    'id': root[1],\n                    'status': estado,\n                    'tree': obj\n                }\n            }\n            tempLines = tempLines.filter(x => !obj.indexOf(x) > -1);\n            obj = [];\n\n        }\n    }\n}\n\n// Return the dialectical tree of a particular argument\nfunction get_dialectical_tree(root) {\n    let nodes = [];\n    let edges = [];\n    let color, typeDefeat, conclusion;\n\n    if (treesGlobal[root].status === \"U\") {\n        color = '#33FF6B';\n    } else {\n        color = '#ff6666';\n    }\n\n    conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(root));\n    //Add the root of the tree\n    nodes.push({\n        'id': treesGlobal[root].id,\n        'label': conclusion.label,\n        'title': root,\n        'shape': 'triangle',\n        'size': 40,\n        'font': {\n            vadjust: -130,\n            size: 28,\n            color: 'black'\n        },\n        'color': color\n    });\n\n    let lines = treesGlobal[root].tree;\n    for (let count = 0; count < lines.length; count++) {\n        if (!utils.valueExistsinObjectArray(nodes, lines[count][0][3])) {\n            conclusion = argumentsObject.find(element => element.id === utils.getFormatedArgumentBody(lines[count][0][1]));\n            nodes.push({\n                'id': lines[count][0][3],\n                'label': conclusion.label,\n                'title': utils.getFormatedArgumentBody(lines[count][0][1]),\n                'shape': 'triangle',\n                'color': lines[count][2],\n                'size': 40,\n                'font': {\n                    vadjust: -130,\n                    size: 28,\n                    color: 'black'\n                }\n\n            });\n        }\n        typeDefeat = get_type_defeat(lines[count][0][0], lines[count][0][1]);\n        edges.push({\n            from: lines[count][0][2],\n            to: lines[count][0][3],\n            width: 3,\n            'dashes': typeDefeat\n        });\n    }\n\n    return {\n        'nodes': nodes,\n        'edges': edges\n    };\n}\n\n// This function take the DeLP Core response and generate\n// the structures to draw the tree graphs\nexport function generate_tree_graph_structures(jsonCoreResponseStatus) {\n    console.log(\"Parsing DeLP Core response (Trees)...\");\n    treesGlobal = {};\n    trees = {};\n    // Build global trees structure\n    build_trees_global(jsonCoreResponseStatus);\n\n    // Build the structures to graph the dialectical trees\n    for (const [root,] of Object.entries(treesGlobal)) {\n        trees[root] = get_dialectical_tree(root);\n    }\n\n    let labeledArguments = []\n    argumentsObject.map(argument => {\n        argument.color = trees[argument.id].nodes[0].color;\n        labeledArguments.push(argument)\n    });\n    return [trees, labeledArguments, delpSemantic];\n}\n\n","import React, {useState} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Tabs from 'react-bootstrap/Tabs';\nimport Tab from 'react-bootstrap/Tab';\nimport {Col, Form} from 'react-bootstrap';\n\n\nconst URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst axios = require('axios');\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\"\n}\n\nconst paramsForRandomProgramGen2 = {\n    \"nPosLiterals\" : 10,\n    \"nNegLiterals\" : 5,\n    \"maxStrictLiterals\" : 5,\n    \"nestingLevel\": 3,\n    \"bodyLength\" : 3,\n    \"headPerLiteral\" : 4,\n    \"properDefeatProb\" : 0.5\n}\n\nconst paramsForRandomProgramGen1 = {\n    \"nPrograms\" : 1, //Number of program to generate\n    \"nLiterals\" : 20, //Max number of literals\n    \"nNegLiterals\" : 15, //Max number of negative literals\n    \"nFacts\" : 7, //Max number of facts\n    \"minNDifHeads\" : 4, //Min number of differente heads\n    \"maxNDifHeads\" : 6, //Max number of differente heads,\n    \"minNDifRules\" : 5, //Min number of rules\n    \"maxNDifRules\" : 6, //Max number of rules,\n    \"maxNStrictsRules\" : 5, //Max number of strict rules\n    \"minNRulesInBody\" : 4, //Min number of literals in bodies\n    \"maxNRulesInBody\" : 4, //Max number of literals in bodies\n    \"maxAssocLevel\" : 3 //Association Level\n}\n\nclass Generator2Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    \n    this.inputPosLit = React.createRef();\n    this.inputNegLit = React.createRef();\n    this.inputMaxSRules = React.createRef();\n    this.inputNestingLevel = React.createRef();\n    this.inputBodyLentgh = React.createRef();\n    this.inputHeads = React.createRef();\n    //this.inputPropDefProb = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPosLiterals\": parseInt(this.inputPosLit.current.value),\n        \"nNegLiterals\": parseInt(this.inputNegLit.current.value),\n        \"maxStrictLiterals\": parseInt(this.inputMaxSRules.current.value),\n        \"nestingLevel\": parseInt(this.inputNestingLevel.current.value),\n        \"bodyLength\": parseInt(this.inputBodyLentgh.current.value),\n        \"headPerLiteral\": parseInt(this.inputHeads.current.value),\n        \"properDefeatProb\": 0.5\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    console.log(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp2');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/[\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render(){\n    return(\n        <Form>\n        <Form.Row>\n            <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n              <Form.Label>Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputPosLit} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              <Form.Label>~Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number\" ref={this.inputNegLit} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of strict rules\" ref={this.inputMaxSRules} min=\"1\" step=\"1\"/>\n            <Form.Label>Nesting Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputNestingLevel} min=\"1\" step=\"1\"/>\n            <Form.Label>Bodies:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputBodyLentgh} min=\"1\" step=\"1\"/>\n            <Form.Label>Heads:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputHeads} min=\"1\" step=\"1\"/>\n            \n            </Form.Group>\n            \n            <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" rows=\"23\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)}/>\n            </Form.Group>\n        </Form.Row>\n        <Form.Row>\n        <Form.Group as={Col} sm={4}>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(this.getParams())}>\n            Generate\n        </Button>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(paramsForRandomProgramGen2)}>\n            Random\n        </Button>\n        </Form.Group>\n        <Form.Group as={Col} sm={8}>\n        <Button variant=\"primary\" style={{float:\"right\"}} onClick={this.returnProgram}>\n            Ok\n        </Button>\n        </Form.Group>\n        </Form.Row>\n        </Form>\n    )\n  }\n}\n\nclass Generator1Form extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      program:''\n    }\n    this.generateClick = this.generateClick.bind(this);\n    this.handleGeneratedProgram = this.handleGeneratedProgram.bind(this);\n    this.returnProgram = this.returnProgram.bind(this);\n    this.getParams = this.getParams.bind(this);\n    this.inputLit = React.createRef();\n    this.inputNLit = React.createRef();\n    this.inputFacts = React.createRef();\n    this.inputMinHeads = React.createRef();\n    this.inputMaxHeads = React.createRef();\n    this.inputMinRules = React.createRef();\n    this.inputMaxRules = React.createRef();\n    this.inputSRules = React.createRef();\n    this.inputMinBodyLiterals = React.createRef();\n    this.inputMaxBodyLiterals = React.createRef();\n    this.inputAssocLevel = React.createRef();\n  }\n\n  handleGeneratedProgram(program){\n    this.setState({\n      program:program\n    });\n  }\n\n  returnProgram(){\n    this.props.program(this.state.program);\n  }\n\n  getParams(){\n      return {\n        \"nPrograms\": 1, //Number of program to generate\n        \"nLiterals\": parseInt(this.inputLit.current.value), //Max number of literals\n        \"nNegLiterals\": parseInt(this.inputNLit.current.value), //Max number of negative literals\n        \"nFacts\": parseInt(this.inputFacts.current.value), //Max number of facts\n        \"minNDifHeads\": parseInt(this.inputMinHeads.current.value), //Min number of differente heads\n        \"maxNDifHeads\": parseInt(this.inputMaxHeads.current.value), //Max number of differente heads,\n        \"minNDifRules\": parseInt(this.inputMinRules.current.value), //Min number of rules\n        \"maxNDifRules\": parseInt(this.inputMaxRules.current.value), //Max number of rules,\n        \"maxNStrictsRules\": parseInt(this.inputSRules.current.value), //Max number of strict rules\n        \"minNRulesInBody\": parseInt(this.inputMinBodyLiterals.current.value), //Min number of literals in bodies\n        \"maxNRulesInBody\": parseInt(this.inputMaxBodyLiterals.current.value), //Max number of literals in bodies\n        \"maxAssocLevel\": parseInt(this.inputAssocLevel.current.value) //Association Level\n    };\n  }\n\n  generateClick(params){\n    let self=this;\n    let formData = new FormData();\n    params = JSON.stringify(params);\n    formData.append('params',params);\n    formData.append('action','generateDelp1');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n    .then(function (response) {\n      if(response.data === 0){\n        console.log(\"Error to generate program\");\n        self.handleGeneratedProgram(\"Error to generate program\");\n      }else if(response.data === 1){\n        console.log(\"Timeout to generate program\");\n        self.handleGeneratedProgram(\"Timeout to generate program\");\n      }else{\n        //console.log(response.data);\n        let program = response.data.replace(/[\\[\\]']/g,'').replace(/(\\., )/g,\".\\n\");\n        self.handleGeneratedProgram(program);\n      }\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n\n  }\n  render(){\n    return(\n        <Form>\n        <Form.Row>\n            <Form.Group as={Col} sm={3} controlId=\"formGridParams\">\n            <h4>Params:</h4>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n              <Form.Label>Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\" placeholder=\"Max number\" ref={this.inputLit} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              <Form.Label>~Literals:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number\" ref={this.inputNLit} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Facts:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of facts\" ref={this.inputFacts} min=\"1\" step=\"1\"/>\n            <Form.Label>Strict Rules:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max number of strict rules\" ref={this.inputSRules} min=\"1\" step=\"1\"/>\n            <Form.Label>Association Level:</Form.Label>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Association level\" ref={this.inputAssocLevel} min=\"1\" step=\"1\"/>\n            \n            <Form.Label>Different Heads:</Form.Label>\n            \n            <Form.Row>\n            \n            <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            <Form.Group as={Col} sm={6}>\n            \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxHeads} min=\"1\" step=\"1\"/>\n            </Form.Group>\n            </Form.Row>\n            <Form.Label>Rules:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min  \" ref={this.inputMinRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max \" ref={this.inputMaxRules} min=\"1\" step=\"1\"/>\n              </Form.Group>\n            </Form.Row>\n            <Form.Label>Body Literals:</Form.Label>\n            <Form.Row>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Min \" ref={this.inputMinBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n              <Form.Group as={Col} sm={6}>\n              \n            <Form.Control size=\"sm\" type=\"number\"  placeholder=\"Max\" ref={this.inputMaxBodyLiterals} min=\"1\" step=\"1\"/>\n            \n              </Form.Group>\n            </Form.Row>\n            \n            </Form.Group>\n            \n            <Form.Group as={Col} sm={9} controlId=\"formGridProgram\">\n            <h4>Program:</h4>\n            <Form.Control as=\"textarea\" value={this.state.program} spellcheck=\"false\" rows=\"23\" style={textAreaProgramStyle} onChange={(event) => this.handleGeneratedProgram(event.target.value)}/>\n            </Form.Group>\n        </Form.Row>\n        <Form.Row>\n        <Form.Group as={Col} sm={4}>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(this.getParams())}>\n            Generate\n        </Button>\n        <Button variant=\"primary\" onClick={()=>this.generateClick(paramsForRandomProgramGen1)}>\n            Random\n        </Button>\n        </Form.Group>\n        <Form.Group as={Col} sm={8}>\n        <Button variant=\"primary\" style={{float:\"right\"}} onClick={this.returnProgram}>\n            Ok\n        </Button>\n        </Form.Group>\n        </Form.Row>\n        </Form>\n    )\n  }\n}\n\nfunction GeneratorsModal(props){\n      const [key, setKey] = useState('gen1');\n\n      function handleGenProg(program){\n        props.returnedProgram(program);\n        props.onHide();\n        \n      }\n\n      return (\n        <Modal size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" show={props.show} onHide={props.onHide} centered>\n          <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n              DeLP Programs Generators\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tabs\n              id=\"controlled-tab-example\"\n              activeKey={key}\n              onSelect={(k) => setKey(k)}\n            >\n              <Tab eventKey=\"gen1\" title=\"Generator 1\">\n                <Generator1Form program={handleGenProg}/>\n              </Tab>\n              <Tab eventKey=\"gen2\" title=\"Generator 2\">\n                <Generator2Form program={handleGenProg}/>\n              </Tab>\n            </Tabs>\n          </Modal.Body>\n          {/* <Modal.Footer>\n            <Button onClick={props.onHide}>Close</Button>\n          </Modal.Footer> */}\n        </Modal>\n      )\n  }\n  \n  function Generators(props) {\n    const [modalShow, setModalShow] = React.useState(false);\n    \n    function generatedProgram(program){\n      props.showGeneratedProgram(program);\n    }\n    \n    return (\n      <>\n        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"sm\" onClick={() => setModalShow(true)} block>\n          Generators\n        </Button>\n  \n        <GeneratorsModal\n          show={modalShow}\n          onHide={() => setModalShow(false)}\n          returnedProgram={generatedProgram}\n        />\n      </>\n    );\n  }\n\nexport default Generators;","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport {Button, FormGroup} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass Views extends React.Component{\n    constructor(props) {\n        super(props);\n        this.handleChangeViews = this.handleChangeViews.bind(this);\n        this.subArgumentRel = React.createRef();\n        this.typesDefeats = React.createRef();\n        this.attackTypeInternal = React.createRef();\n        this.attackTypeConclusion = React.createRef();\n        this.statusArguments = React.createRef();\n\n    }\n\n    handleChangeViews(){\n        let settingViews = {\n            optionSubArgumentRelation: this.subArgumentRel.current.checked,\n            optionTypeDefeater: this.typesDefeats.current.checked,\n            optionsAttacksPointsInternal: this.attackTypeInternal.current.checked,\n            optionsAttackPointsConclusion: this.attackTypeConclusion.current.checked,\n            optionStatusArguments: this.statusArguments.current.checked\n        };\n\n        this.props.handleViewsChange(settingViews);\n\n    }\n\n    render() {\n        return (\n            <div style={{position: 'fixed',zIndex:999}}>\n            <Accordion defaultActiveKey=\"1\">\n                <Card>\n                    <Accordion.Toggle as={Card.Header} eventKey=\"0\" style={{paddingTop:'0px',\n                        backgroundColor:'#7c7c7c', color:'white', paddingBottom:'0px'}}>\n                        Options\n                    </Accordion.Toggle>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Card.Body>\n                            <FormGroup>\n                            <label style={{color:'#337ab7', fontSize:'20px'}}>-- Views</label>\n                            <Form onChange={this.handleChangeViews}>\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref={this.subArgumentRel}\n                                    label='Subargument relation'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.typesDefeats}\n                                    label='Types of defeat (proper or blocking)'\n                                />\n                                <label>Attack type:</label>\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeInternal}\n                                            label='Internal'\n                                />\n                                <Form.Check style={{marginLeft:\"20px\"}}\n                                            type='checkbox'\n                                            defaultChecked={true}\n                                            ref = {this.attackTypeConclusion}\n                                            label='Conclusion'\n                                />\n                                <Form.Check\n                                    type='checkbox'\n                                    defaultChecked={true}\n                                    ref = {this.statusArguments}\n                                    label='Status of the arguments'\n                                />\n                            </Form>\n                            </FormGroup>\n                            <FormGroup>\n                                <label style={{color:'#337ab7', fontSize:'20px'}}>-- DeLP Graph</label>\n                                <Row>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Info</Button>\n                                    </Col>\n                                    <Col>\n                                        <Button style={{backgroundColor:'#337ab7', border:'0px'}} size=\"md\" block>Print</Button>\n                                    </Col>\n\n                                </Row>\n                            </FormGroup>\n                        </Card.Body>\n                    </Accordion.Collapse>\n                </Card>\n\n            </Accordion>\n            </div>\n        );\n    }\n}\n\nexport default Views;","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nimport Views from \"./views\";\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDeLPGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.selectedArgument = '';\n        this.myDeLPGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.dGraphNetworkEvents = this.dGraphNetworkEvents.bind(this);\n        this.notifyArgumentSelected = this.notifyArgumentSelected.bind(this);\n        this.defineView = this.defineView.bind(this);\n        this.network = {};\n        this.handleModalChange = this.handleModalChange.bind(this);\n    }\n\n    handleModalChange(value, msg){\n        this.props.handleModalChange(value, msg);\n      }\n\n    defineView(viewsSetting){\n        let adaptedDefeatsObject = JSON.parse(JSON.stringify(this.props.delpGraph.defeatsObject));\n        let adaptedArgumentsObject = JSON.parse(JSON.stringify(this.props.delpGraph.argumentsObject));\n\n        if ((viewsSetting.optionsAttacksPointsInternal || viewsSetting.optionsAttackPointsConclusion) &&\n            !(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n            if (viewsSetting.optionsAttacksPointsInternal) {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === 'I');\n            } else {\n                adaptedDefeatsObject = adaptedDefeatsObject.filter(element => element.label === \"C\");\n            }\n        } else {\n            if (!(viewsSetting.optionsAttacksPointsInternal && viewsSetting.optionsAttackPointsConclusion)) {\n\n                adaptedDefeatsObject.forEach(function (element) { delete element.label });\n\n            }\n\n        }\n\n        if (!viewsSetting.optionTypeDefeater) {\n            adaptedDefeatsObject.forEach(function (element) { delete element.dashes });\n            adaptedDefeatsObject.forEach(function (element) {\n                element.color = {\n                    color: '#97C2FC',\n                    highlight: '#97C2FC',\n                    hover: '#97C2FC'\n                };\n            });\n        }\n\n        let subsArg = [];\n        if (viewsSetting.optionSubArgumentRelation) {\n            subsArg = this.props.delpGraph.subArgumentsObject;\n        }\n\n        if(!viewsSetting.optionStatusArguments){\n            adaptedArgumentsObject.forEach(function (element) {\n                delete element.color\n            });\n        }\n\n        let newDefeatsObject = {\n            argumentsObject: adaptedArgumentsObject,\n            defeatsObject: adaptedDefeatsObject,\n            subArgumentsObject: subsArg\n        };\n\n        this.updateNetwork(newDefeatsObject);\n    }\n\n    notifyArgumentSelected(){\n        this.props.handleNotifyArgumentSelected(this.selectedArgument);\n    }\n\n    dGraphNetworkEvents(){\n        let self = this;\n        //Here define the associadted events with the network\n        this.network.on(\"click\", function (params) {\n            let selectedArgument = params.nodes[0];\n            if(selectedArgument){\n                self.selectedArgument = selectedArgument;\n                self.notifyArgumentSelected();\n            }\n        });\n        this.network.on(\"stabilizationIterationsDone\", function (params) {\n            self.handleModalChange(false, '');\n        });\n    }\n\n    componentDidMount(){\n        this.network = new Network(this.myDeLPGraphNetwork.current, data, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.dGraphNetworkEvents();\n    }\n\n    updateNetwork(newData){\n        console.log(\"Updating network...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.argumentsObject, edges:newData.defeatsObject.concat(newData.subArgumentsObject)});\n\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.delpGraph !== prevProps.delpGraph){\n            this.updateNetwork(this.props.delpGraph);\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            <label>DeLP Graph</label>\n                <Views handleViewsChange = {this.defineView}/>\n                <div ref={this.myDeLPGraphNetwork} style={{height: \"84vh\"}}/>\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDeLPGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n\n// Options for Trees Network\nvar options = {\n    edges: {\n        smooth: true,\n        arrowStrikethrough: false,\n        arrows: { from: true }\n    },\n    layout: {\n        randomSeed: 2,\n        hierarchical: {\n            sortMethod: 'directed'\n        }\n    },\n    physics: {\n        enabled: false\n    }\n};\n\n\n\nclass VisLibTrees extends React.Component {\n    constructor(props) {\n        super(props);\n        this.network = {};\n        this.myTreeNetwork = React.createRef();\n        this.updateTree = this.updateTree.bind(this);\n    }\n\n    componentDidMount() {\n        this.network = new Network(this.myTreeNetwork.current, data, options);\n    }\n\n    updateTree(tree) {\n        nodes = tree.nodes;\n        edges = tree.edges;\n\n        this.network.setData({ nodes: nodes, edges: edges });\n\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedArgument !== prevProps.selectedArgument) {\n            this.updateTree(this.props.selectedArgument);\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <label>Dialectical Tree</label>\n                <div ref={this.myTreeNetwork} style={{ height: \"84vh\" }} />\n            </div>\n        )\n    }\n}\n\nexport default VisLibTrees;","import React, { useEffect, useState } from \"react\";\nimport { examplePrograms } from './examplePrograms';\nimport { generate_graph_structures, generate_tree_graph_structures } from \"./DataParsing\";\nimport Generators from './generators/generators';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\nimport VisNetworkDeLPGraph from './visLibDeLPGraph'\nimport VisLibTrees from \"./visLibTrees\";\nimport Spinner from 'react-bootstrap/Spinner'\nimport Collapse from 'react-bootstrap/Collapse'\n\n//const URLtoCore = 'http://localhost/daqapClient/bridge/bridge.php';\nconst URLtoCore = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/bridge.php';\n\nconst axios = require('axios');\n\nconst containersStyleTEST = {\n  marginTop: \"10px\",\n  width: \"100%\"\n}\n\n\n\nconst textAreaProgramStyle = {\n  resize: \"none\",\n  fontFamily: \"Consolas\",\n  fontSize: \"14px\",\n  height: \"65vh\",\n  marginTop: \"5px\"\n}\n\nclass ModalDeLP extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps){\n    console.log(this.props.modalInfo);\n    if (prevProps.modalInfo !== this.props.modalInfo){\n      this.setState({modalInfo: {visible: this.props.modalInfo.visible, msg: this.props.modalInfo.msg}});\n    }\n  }\n\n  render(){\n    return (\n      <>\n      <Modal\n      show={this.state.modalInfo['visible']}\n      size=\"sm\"\n      centered\n    >\n      <Modal.Header>\n      </Modal.Header>\n      <Modal.Body>\n        <p className=\"text-center\">\n        {this.state.modalInfo['msg']}\n        <Spinner animation=\"grow\" size='sm' variant=\"primary\"/>\n        </p>\n      </Modal.Body>\n      <Modal.Footer>\n      </Modal.Footer>\n    </Modal>\n      </>\n    );\n  }\n}\n\n\nclass ExamplePrograms extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedProgram: \"0\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  componentDidMount() {\n    this.setState({\n      selectedProgram: examplePrograms[\"0\"]\n    });\n    this.props.handleTextChange(examplePrograms[\"0\"]);\n  }\n\n  handleChange(event, program) {\n    this.setState({\n      selectedProgram: event.target.value\n    });\n    this.props.handleTextChange(program);\n  };\n\n  createSelectItems() {\n    let items = [];\n    items.push(<option key={-1} value=\"Write your program or select one of the examples.\">Select an example</option>);\n    for (var key in examplePrograms) {\n      items.push(<option key={key} value={examplePrograms[key]}>Example {key}</option>);\n    }\n    return items\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state.selectedProgram}\n        onChange={(e) => this.handleChange(e, e.target.value)}\n        ref={this.refExample}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\nfunction SelectPreferenceCriterion() {\n  return (\n    <Container>\n      <Row>\n        <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"sm\" block>\n          Pref. Criterion\n        </Button>\n      </Row>\n    </Container>\n  )\n}\n\nclass AnalyzeProgramButton extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  setResponse(response) {\n    this.props.handleResponse(response);\n  }\n\n  handleModalChange(value, msg){\n    this.props.handleModalChange(value, msg);\n  }\n\n  componentDidMount() {\n    this.AnalyzeButtonRef.current.click();\n  }\n\n  parseProgram(program){\n    let newProgram = ''\n    const rules = program.split(/\\r?\\n/);\n    rules.map((rule)=>{\n      if(!(rule.includes('<-') || rule.includes('-<'))){\n        if(!rule.includes('use_criterion') && rule !== ''){\n          newProgram = newProgram + rule.replace('.','<- true.') + '\\n';\n        }else{\n          newProgram = newProgram + rule + '\\n';\n        }\n      }\n      else{\n        newProgram = newProgram + rule + '\\n';\n      }\n    });\n    return newProgram;\n  }\n\n  handleOnClick() {\n    let self = this;\n    this.handleModalChange(true, 'Analyzaing program...');\n    let delpProgram = this.props.program;\n    let parserProgram = self.parseProgram(delpProgram);\n    console.log(parserProgram);\n    let formData = new FormData();\n    formData.append('delp', parserProgram);\n    formData.append('version', '2018');\n    formData.append('action', 'makeDelp');\n    // Show a loader?\n    axios.post(URLtoCore, formData)\n      .then(function (response) {\n        console.log(\"Core Response: \", response.data);\n        self.setResponse(response.data);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Analyze DeLP\n      </Button>\n    )\n  }\n}\n\nclass ProgramMenu extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this)\n  };\n  handleChange(optionValue) {\n    this.props.handleTextChange(optionValue)\n  };\n\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col md=\"6\"><ExamplePrograms handleTextChange={this.handleChange} /></Col>\n          <Col md=\"6\"><Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"sm\" block>Load</Button></Col>\n        </Row>\n        <Row style={{ marginTop: \"3px\" }}>\n          <Col md=\"12\"><Generators showGeneratedProgram={this.handleChange} /></Col>\n          {/* <Col md=\"6\"><SelectPreferenceCriterion /></Col> */}\n        </Row>\n      </div>\n    )\n  }\n}\n\nclass TextAreaProgram extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    this.props.handleTextChange(e.target.value)\n  }\n\n  render() {\n    return (\n      <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n        <Form.Control as=\"textarea\" style={textAreaProgramStyle} spellCheck=\"false\" value={this.props.value} onChange={this.handleChange} />\n      </Form.Group>\n    )\n  }\n}\n\nclass AppDeLP extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      delpProgram: examplePrograms[\"0\"],\n      coreResponse: '',\n      dGraph: '',\n      trees: '',\n      selectedArgument: '',\n      delpSemantic: '',\n      modalInfo:{\n        visible: false,\n        msg: ''\n      }\n    };\n    this.handleProgramChange = this.handleProgramChange.bind(this);\n    this.handleResponse = this.handleResponse.bind(this);\n    this.handleSelectedArgument = this.handleSelectedArgument.bind(this);\n    this.handleModalChange = this.handleModalChange.bind(this);\n  }\n\n  handleModalChange(value, msg){\n    console.log(value, msg);\n    this.setState({modalInfo:{\n      visible: value,\n      msg: msg\n    }});\n  }\n\n  handleProgramChange(value) {\n    this.setState({ delpProgram: value });\n  }\n\n  handleResponse(coreResponse) {\n    let structures;\n    let trees;\n    try{\n      structures = generate_graph_structures(coreResponse.dGraph);\n      trees = generate_tree_graph_structures(coreResponse.status);\n    } catch(error){\n      this.handleModalChange(true, 'Program error... Abort.');\n      throw new Error(\"Something went badly wrong!\");\n    }\n    this.setState({\n      coreResponse: coreResponse,\n      dGraph: {\n        argumentsObject: trees[1],\n        defeatsObject: structures.defeatsObject,\n        defeatsObjectDung: structures.defeatsObjectDung,\n        subArgumentsObject: structures.subArgumentsObject\n      },\n      trees: trees[0],\n      selectedArgument: Object.keys(trees[0])[0],\n      delpSemantic: trees[2]\n    });\n    this.props.handleGlobalResponseChange({\n      argumentsObjectDung: structures.argumentsObjectDung,\n      defeatsObjectDung: structures.defeatsObjectDung,\n      argumentsDung: structures.argumentsDung,\n      attacksDung: structures.attacksDung,\n      delpSemantic: trees[2]\n    });\n  }\n\n  handleSelectedArgument(selectedArgument) {\n    if (selectedArgument !== this.state.selectedArgument) {\n      console.log(\"Selected argument: \", selectedArgument);\n      this.setState({\n        selectedArgument: selectedArgument\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col lg=\"3\" style={containersStyleTEST}>\n            <label>Program</label>\n            <ProgramMenu handleTextChange={this.handleProgramChange} />\n            <TextAreaProgram value={this.state.delpProgram}\n              handleTextChange={this.handleProgramChange} />\n            <AnalyzeProgramButton program={this.state.delpProgram}\n              handleResponse={this.handleResponse} \n              handleModalChange={this.handleModalChange}/>\n            <ModalDeLP modalInfo={this.state.modalInfo}/>  \n          </Col>\n          <Col lg=\"5\" style={containersStyleTEST}>\n            <VisNetworkDeLPGraph delpGraph={this.state.dGraph}\n              handleNotifyArgumentSelected={this.handleSelectedArgument} \n              handleModalChange={this.handleModalChange}/>\n          </Col>\n          <Col lg=\"4\" style={containersStyleTEST}>\n            <VisLibTrees selectedArgument={this.state.trees[this.state.selectedArgument]}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDeLP;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\n\nclass VisNetworkDungGraph extends React.Component{\n    constructor(props){\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n    }\n\n    \n    componentDidMount(){\n        this.network = new Network(this.myDungGraphNetwork.current, {nodes:this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs}, options);\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n    }\n\n    updateNetwork(newData){\n        console.log(\"Updating Dung network...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({nodes: newData.nodes, edges:newData.arcs});\n    }\n\n    componentDidUpdate(prevProps){\n        if(this.props.dungGraph !== prevProps.dungGraph){\n            this.updateNetwork(this.props.dungGraph);\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            <label>Dung Graph</label>\n                <div ref={this.myDungGraphNetwork} style={{height: \"70vh\"}}/>\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraph;\n","import React from \"react\";\nimport { Network } from \"vis-network/peer/esm/vis-network\";\nimport { DataSet } from \"vis-data/peer/esm/vis-data\"\n\nrequire(\"vis-network/dist/dist/vis-network.min.css\");\n\nvar nodes = new DataSet();\n\n// create an array with edges\nvar edges = new DataSet();\n\nvar data = {\n    nodes: nodes,\n    edges: edges\n};\n// Options for DGgraph Network\nvar options = {\n    nodes: {\n        fixed: false,\n        scaling: {\n            label: true\n        }\n    },\n    edges: {\n        length: 300,\n        arrowStrikethrough: false\n\n    },\n    interaction: {\n        hover: true\n    },\n    physics: {\n        solver: 'forceAtlas2Based',\n        forceAtlas2Based: {\n            springConstant: 0.01,\n            centralGravity: 0.005,\n            avoidOverlap: 1\n        }\n    },\n    layout: { randomSeed: 2 }\n\n};\n\n// initialize your network!\nfunction TitleExtension(props){\n    const semantic = props['extensionData']['semantic'];\n    const extensionIndex = props['extensionData']['id'];\n    if (extensionIndex === -1){\n        return <label>{semantic.charAt(0).toUpperCase() + semantic.slice(1)} Extensions not comp.</label>\n    }else{\n        return <label>{semantic.charAt(0).toUpperCase() + semantic.slice(1)} Extension {extensionIndex}</label>\n    }\n}\n\nclass VisNetworkDungGraphExtensions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.myDungGraphNetwork = React.createRef();\n        this.updateNetwork = this.updateNetwork.bind(this);\n        this.network = {};\n    }\n\n\n    componentDidMount() {\n        console.log(\"Drawing Dung Graph...\");\n        this.network = new Network(this.myDungGraphNetwork.current, { nodes: this.props.dungGraph.nodes, edges: this.props.dungGraph.arcs }, options);\n        this.updateNetworkExtension(this.props.extension);\n\n    }\n\n    updateNetwork(newData) {\n        console.log(\"Updating Dung Graph...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        this.network.setData({ nodes: newData.nodes, edges: newData.arcs });\n    }\n\n    updateNetworkExtension(extension) {\n        console.log(\"Updating Extension Graph...\");\n        this.network.setOptions({ layout: { randomSeed: 2 } });\n        nodes = this.props.dungGraph.nodes;\n        if (extension['id'] === -1) {\n            nodes.map(node => {\n                this.network.body.data.nodes.update([{\n                    id: node['id'],\n                    color: '#97C2FC'\n                }]);\n            })\n        } else {\n            nodes.map(node => {\n                if (extension['extension'].includes(node['id'])) {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#33FF6B'\n                    }]);\n                } else {\n                    this.network.body.data.nodes.update([{\n                        id: node['id'],\n                        color: '#ff6666'\n                    }]);\n                }\n            })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.dungGraph !== prevProps.dungGraph) {\n            this.updateNetwork(this.props.dungGraph);\n        }\n        if (this.props.extension !== prevProps.extension) {\n            this.updateNetworkExtension(this.props.extension);\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <TitleExtension extensionData={this.props.extension}/>\n                <div ref={this.myDungGraphNetwork} style={{ height: \"70vh\" }} />\n            </div>\n        )\n    }\n}\n\n\nexport default VisNetworkDungGraphExtensions;\n","import React, { useEffect, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport VisNetworkDungGraph from './visLibDungGraph'\nimport VisNetworkDungGraphExtensions from './visLibDungGraphExtensions'\n//import {BrowserRouter, Link, NavLink, Redirect, Route, Switch} from 'react-router-dom'\n\n//const URLtoDungSolvers = 'http://localhost/daqapClient/bridge/callSolver.php';\nconst URLtoDungSolvers = 'https://hosting.cs.uns.edu.ar/~daqap/bridge/callSolver.php';\n\nconst axios = require('axios');\n\nconst containersStyleTEST = {\n  marginTop: \"10px\",\n  width: \"100%\"\n}\n\nclass QuerySemantic extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.handleOnClick = this.handleOnClick.bind(this);\n    this.setResponse = this.setResponse.bind(this);\n    this.AnalyzeButtonRef = React.createRef();\n  }\n\n  setResponse(response) {\n    this.props.handleSemanticCompute(response);\n  }\n\n  handleOnClick() {\n    let self = this;\n    const semantic = this.props.selectedSemantic;\n    const semExtensions = this.props.semantics[semantic];\n    if (semExtensions.length == 0) {\n      let formData = new FormData();\n      for (var i = 0; i < this.props.args.length; i++) {\n        formData.append('arguments[]', this.props.args[i]);\n      }\n      for (var i = 0; i < this.props.attacks.length; i++) {\n        formData.append('attacks[]', this.props.attacks[i]);\n      }\n      formData.append('semantics', this.props.selectedSemantic);\n      formData.append('solver', this.props.selectedSolver);\n      formData.append('action', 'solver');\n      //Show a loader?\n      axios.post(URLtoDungSolvers, formData)\n        .then(function (response) {\n          console.log(\"Solver Response: \", response['data']);\n          let extensions = response['data'][semantic];\n          if (Array.isArray(extensions[0])) {\n            let toNumberFormat = extensions.map((extension) => {\n              return extension.map(Number);\n            });\n            self.setResponse(toNumberFormat);\n          } else {\n            let toNumberFormat = extensions.map(Number);\n            self.setResponse([toNumberFormat]);\n          }\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    } else {\n      console.log(\"Semantics already computed: \", this.props.selectedSemantic);\n    }\n\n  }\n\n  render() {\n    return (\n      <Button style={{ backgroundColor: '#337ab7', border: '0px' }} size=\"md\" block onClick={this.handleOnClick} ref={this.AnalyzeButtonRef}>\n        Query\n      </Button>\n    )\n  }\n}\n\nclass SelectExtension extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedExtension: 0\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExtension = React.createRef();\n  };\n\n  handleChange(key, extension) {\n    console.log(key);\n    this.setState({\n      selectedExtension: key\n    });\n    this.props.handleChangeExtension({ 'id': key, 'extension': extension });\n  };\n\n  componentDidUpdate(prevProps) {\n    const newExtensions = this.props.extensions;\n    if (prevProps['extensions'] !== newExtensions) {\n      if (newExtensions.length !== 0) {\n        this.handleChange(0, newExtensions[0]);\n      }\n    }\n  }\n\n  createSelectItems() {\n    let items = [];\n    let extensions = this.props.extensions;\n    if (extensions.length !== 0) {\n      for (var key in extensions) {\n        items.push(<option key={key} value={extensions[key]}>{String(key + ':  {' + extensions[key] + '}')}</option>);\n      }\n\n    } else {\n      items.push(<option key={-1} value={[]}>{String(\"---\")}</option>);\n    }\n    return items;\n  }\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom key={this.state['selectedExtension']}\n        onChange={(e) => this.handleChange(e.target.key, e.target.value)}\n        ref={this.refExtension}>\n        {this.createSelectItems()}\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSemantic extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedSemantic: \"delp\"\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.refExample = React.createRef();\n  };\n\n  handleChange(semantic) {\n    this.setState({\n      selectedSemantic: semantic\n    });\n    this.props.handleChangeSemantic(semantic);\n  };\n\n  render() {\n    return (\n      <Form.Control as=\"select\" size=\"sm\" custom value={this.state['selectedSemantic']}\n        onChange={(e) => this.handleChange(e.target.value)}\n        ref={this.refExample}>\n        <option key={1} value=\"delp\">DeLP</option>\n        <option key={2} value=\"grounded\">Grounded</option>\n        <option key={3} value=\"preferred\">Preferred</option>\n        <option key={4} value=\"stable\">Stable</option>\n        <option key={5} value=\"semistable\">Semistable</option>\n        <option key={6} value=\"allSemantics\">All Semantics</option>\n      </Form.Control>\n    )\n  }\n}\n\nclass SelectSolver extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedSolver: 'ArgTech'\n    };\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ selectedSolver: newSolver });\n    this.props.handleChangeSolver(newSolver);\n  };\n\n  render() {\n    return (\n      <Form>\n        <label>Select solver:</label>\n        <div key={`solvers`} className=\"mb-3\" onChange={(e) => this.handleChangeSolver(e.target.id)}>\n          <Form.Check\n            inline\n            label=\"jArgSemSat\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`jArgSemSat`}\n            disabled\n          />\n          <Form.Check\n            inline\n            label=\"Arg-Tech\"\n            name=\"group1\"\n            type=\"radio\"\n            id={`ArgTech`}\n            defaultChecked\n          />\n        </div>\n      </Form>\n    )\n  }\n}\n\nclass AppDung extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      'dungGraph': { 'nodes': this.props.dungGraph.argumentsObjectDung, 'arcs': this.props.dungGraph.defeatsObjectDung },\n      'solverData': { 'args': this.props.dungGraph.argumentsDung, 'attacks': this.props.dungGraph.attacksDung },\n      'selectedSemantic': 'delp',\n      'semantics': {\n        'delp': [this.props.dungGraph.delpSemantic],\n        'grounded': [[2, 3, 4]],\n        'preferred': [],\n        'stable': [],\n        'semistable': [],\n        'allSemantics': [],\n      },\n      'extension': {\n        'semantic': 'delp',\n        'id': 0,\n        'extension': this.props.dungGraph.delpSemantic\n      },\n      'solver': 'ArgTech',\n    };\n    this.handleChangeSemantic = this.handleChangeSemantic.bind(this);\n    this.handleChangeSolver = this.handleChangeSolver.bind(this);\n    this.handleChangeExtension = this.handleChangeExtension.bind(this);\n    this.handleSemanticCompute = this.handleSemanticCompute.bind(this);\n  };\n\n  handleChangeSemantic(newSemantic) {\n    this.setState({ 'selectedSemantic': newSemantic });\n  };\n\n  handleChangeSolver(newSolver) {\n    this.setState({ 'solver': newSolver });\n  }\n\n  handleChangeExtension(extension) {\n    console.log(\"New Extension to Draw \", extension);\n    const selectedSemantic = this.state['selectedSemantic'];\n    this.setState({ 'extension': { 'semantic': selectedSemantic, 'id': extension['id'], 'extension': extension['extension'] } });\n  }\n\n  handleSemanticCompute(semanticExtensions) {\n    const selectedSemantic = this.state['selectedSemantic'];\n    var semantics = { ...this.state['semantics'] };\n    semantics[selectedSemantic] = semanticExtensions;\n    this.setState({ semantics });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        <Row>\n          <Col lg='2' style={containersStyleTEST}>\n            <label>Select Semantic:</label>\n            <SelectSemantic handleChangeSemantic={this.handleChangeSemantic} />\n          </Col>\n          <Col lg='3' style={containersStyleTEST}>\n            <SelectSolver handleChangeSolver={this.handleChangeSolver} />\n          </Col>\n          <Col lg='2' style={{ marginTop: '25px' }}>\n            <QuerySemantic selectedSemantic={this.state['selectedSemantic']}\n              selectedSolver={this.state['solver']}\n              args={this.state['solverData']['args']}\n              attacks={this.state['solverData']['attacks']}\n              semantics={this.state['semantics']}\n              handleSemanticCompute={this.handleSemanticCompute} />\n          </Col>\n          <Col lg='4' style={{ containersStyleTEST }}>\n            <label>Select Extension:</label>\n            <SelectExtension extensions={this.state['semantics'][this.state['selectedSemantic']]}\n              handleChangeExtension={this.handleChangeExtension} />\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"6\" style={containersStyleTEST}>\n            <VisNetworkDungGraph dungGraph={this.state['dungGraph']} />\n          </Col>\n          <Col lg=\"6\" style={containersStyleTEST}>\n            <VisNetworkDungGraphExtensions dungGraph={this.state['dungGraph']}\n              extension={this.state['extension']} />\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default AppDung;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport { BrowserRouter, Link, NavLink, Redirect, Route, Switch } from 'react-router-dom'\nimport AppDeLP from './delp/delp'\nimport AppDung from './dung/dung'\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\targumentsObjectDung: '',\n\t\t\tdefeatsObjectDung: '',\n\t\t\targumentsDung: '',\n\t\t\tattacksDung: '',\n\t\t\tdelpSemantic: ''\n\t\t};\n\t\tthis.handleResponse = this.handleResponse.bind(this);\n\t}\n\n\thandleResponse(response) {\n\t\tthis.setState({\n\t\t\targumentsObjectDung: response.argumentsObjectDung,\n\t\t\tdefeatsObjectDung: response.defeatsObjectDung,\n\t\t\targumentsDung: response.argumentsDung,\n\t\t\tattacksDung: response.attacksDung,\n\t\t\tdelpSemantic: response.delpSemantic\n\t\t});\n\t}\n\n\tcomponentDidUpdate(){\n\t\tconsole.log(\"NOW\");\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<Navbar expand=\"sm\" style={{ height: \"30px\", backgroundColor: '#337ab7' }}>\n\t\t\t\t\t<Navbar.Brand as={Link} to=\"/\" style={{ color: 'white', fontSize: '12px' }}>DAQAP (Release Candidate 0.1)</Navbar.Brand>\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"mr-auto\">\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/delp\" style={{ color: 'white' }}>DeLP</Nav.Link>\n\t\t\t\t\t\t\t<Nav.Link as={NavLink} to=\"/dung\" style={{ color: 'white' }}>Dung</Nav.Link>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Navbar>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact path='/delp'\n\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t<AppDeLP handleGlobalResponseChange={this.handleResponse} />\n\t\t\t\t\t\t)} />\n\t\t\t\t\t<Route\n\t\t\t\t\t\texact path='/dung'\n\t\t\t\t\t\trender={(props) => (\n\t\t\t\t\t\t\t<AppDung dungGraph={this.state} />\n\t\t\t\t\t\t)} />\n\t\t\t\t\t<Redirect from=\"/\" to=\"/delp\"/>\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}